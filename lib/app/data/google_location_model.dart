///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class GoogleLocationModelResultPhotos {
/*
{
  "height": 1062,
  "html_attributions": [
    "<a href=\"https://maps.google.com/maps/contrib/102574123639894598769\">Sharaf Vpz</a>"
  ],
  "photo_reference": "AUGGfZn_7qn1EjuJYXSP6IFaOPaL55F4IDeYhgLEXKtrgwa0LPDDrxBCvukThBumq47EvsH_5tXMZGOsizJPoTiYcXY9ZplRKBs8NpKgjl8qkiauLW9p2BS0lO8oOtzL1CpyRi8pXRFd3OK0l04ks2Q81T7C5PmaXWmM1af0pOfb_EeA8SIw",
  "width": 2048
}
*/

  int? height;
  List<String?>? htmlAttributions;
  String? photoReference;
  int? width;

  GoogleLocationModelResultPhotos({
    this.height,
    this.htmlAttributions,
    this.photoReference,
    this.width,
  });
  GoogleLocationModelResultPhotos.fromJson(Map<String, dynamic> json) {
    height = json['height']?.toInt();
    if (json['html_attributions'] != null) {
      final v = json['html_attributions'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      htmlAttributions = arr0;
    }
    photoReference = json['photo_reference']?.toString();
    width = json['width']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['height'] = height;
    if (htmlAttributions != null) {
      final v = htmlAttributions;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['html_attributions'] = arr0;
    }
    data['photo_reference'] = photoReference;
    data['width'] = width;
    return data;
  }
}

class GoogleLocationModelResultGeometryViewportSouthwest {
/*
{
  "lat": 57.87571613722567,
  "lng": -101.6921367240961
}
*/

  double? lat;
  double? lng;

  GoogleLocationModelResultGeometryViewportSouthwest({
    this.lat,
    this.lng,
  });
  GoogleLocationModelResultGeometryViewportSouthwest.fromJson(Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GoogleLocationModelResultGeometryViewportNortheast {
/*
{
  "lat": 57.89867552901691,
  "lng": -101.6660383411926
}
*/

  double? lat;
  double? lng;

  GoogleLocationModelResultGeometryViewportNortheast({
    this.lat,
    this.lng,
  });
  GoogleLocationModelResultGeometryViewportNortheast.fromJson(Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GoogleLocationModelResultGeometryViewport {
/*
{
  "northeast": {
    "lat": 57.89867552901691,
    "lng": -101.6660383411926
  },
  "southwest": {
    "lat": 57.87571613722567,
    "lng": -101.6921367240961
  }
}
*/

  GoogleLocationModelResultGeometryViewportNortheast? northeast;
  GoogleLocationModelResultGeometryViewportSouthwest? southwest;

  GoogleLocationModelResultGeometryViewport({
    this.northeast,
    this.southwest,
  });
  GoogleLocationModelResultGeometryViewport.fromJson(Map<String, dynamic> json) {
    northeast = (json['northeast'] != null) ? GoogleLocationModelResultGeometryViewportNortheast.fromJson(json['northeast']) : null;
    southwest = (json['southwest'] != null) ? GoogleLocationModelResultGeometryViewportSouthwest.fromJson(json['southwest']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (northeast != null) {
      data['northeast'] = northeast!.toJson();
    }
    if (southwest != null) {
      data['southwest'] = southwest!.toJson();
    }
    return data;
  }
}

class GoogleLocationModelResultGeometryLocation {
/*
{
  "lat": 57.88158199999999,
  "lng": -101.6720515
}
*/

  double? lat;
  double? lng;

  GoogleLocationModelResultGeometryLocation({
    this.lat,
    this.lng,
  });
  GoogleLocationModelResultGeometryLocation.fromJson(Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GoogleLocationModelResultGeometry {
/*
{
  "location": {
    "lat": 57.88158199999999,
    "lng": -101.6720515
  },
  "viewport": {
    "northeast": {
      "lat": 57.89867552901691,
      "lng": -101.6660383411926
    },
    "southwest": {
      "lat": 57.87571613722567,
      "lng": -101.6921367240961
    }
  }
}
*/

  GoogleLocationModelResultGeometryLocation? location;
  GoogleLocationModelResultGeometryViewport? viewport;

  GoogleLocationModelResultGeometry({
    this.location,
    this.viewport,
  });
  GoogleLocationModelResultGeometry.fromJson(Map<String, dynamic> json) {
    location = (json['location'] != null) ? GoogleLocationModelResultGeometryLocation.fromJson(json['location']) : null;
    viewport = (json['viewport'] != null) ? GoogleLocationModelResultGeometryViewport.fromJson(json['viewport']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (location != null) {
      data['location'] = location!.toJson();
    }
    if (viewport != null) {
      data['viewport'] = viewport!.toJson();
    }
    return data;
  }
}

class GoogleLocationModelResultAddressComponents {
/*
{
  "long_name": "Brochet",
  "short_name": "Brochet",
  "types": [
    "locality"
  ]
}
*/

  String? longName;
  String? shortName;
  List<String?>? types;

  GoogleLocationModelResultAddressComponents({
    this.longName,
    this.shortName,
    this.types,
  });
  GoogleLocationModelResultAddressComponents.fromJson(Map<String, dynamic> json) {
    longName = json['long_name']?.toString();
    shortName = json['short_name']?.toString();
    if (json['types'] != null) {
      final v = json['types'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      types = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['long_name'] = longName;
    data['short_name'] = shortName;
    if (types != null) {
      final v = types;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['types'] = arr0;
    }
    return data;
  }
}

class GoogleLocationModelResult {
/*
{
  "address_components": [
    {
      "long_name": "Brochet",
      "short_name": "Brochet",
      "types": [
        "locality"
      ]
    }
  ],
  "adr_address": "<span class=\"locality\">Brochet</span>, <span class=\"region\">MB</span>, <span class=\"country-name\">Canada</span>",
  "formatted_address": "Brochet, MB, Canada",
  "geometry": {
    "location": {
      "lat": 57.88158199999999,
      "lng": -101.6720515
    },
    "viewport": {
      "northeast": {
        "lat": 57.89867552901691,
        "lng": -101.6660383411926
      },
      "southwest": {
        "lat": 57.87571613722567,
        "lng": -101.6921367240961
      }
    }
  },
  "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/geocode-71.png",
  "icon_background_color": "#7B9EB0",
  "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",
  "name": "Brochet",
  "photos": [
    {
      "height": 1062,
      "html_attributions": [
        "<a href=\"https://maps.google.com/maps/contrib/102574123639894598769\">Sharaf Vpz</a>"
      ],
      "photo_reference": "AUGGfZn_7qn1EjuJYXSP6IFaOPaL55F4IDeYhgLEXKtrgwa0LPDDrxBCvukThBumq47EvsH_5tXMZGOsizJPoTiYcXY9ZplRKBs8NpKgjl8qkiauLW9p2BS0lO8oOtzL1CpyRi8pXRFd3OK0l04ks2Q81T7C5PmaXWmM1af0pOfb_EeA8SIw",
      "width": 2048
    }
  ],
  "place_id": "ChIJM-kkPTMsRVIRIgIuWlmrEGY",
  "reference": "ChIJM-kkPTMsRVIRIgIuWlmrEGY",
  "types": [
    "locality"
  ],
  "url": "https://maps.google.com/?q=Brochet,+MB,+Canada&ftid=0x52452c333d24e933:0x6610ab595a2e0222",
  "utc_offset": -300,
  "vicinity": "Brochet"
}
*/

  List<GoogleLocationModelResultAddressComponents?>? addressComponents;
  String? adrAddress;
  String? formattedAddress;
  GoogleLocationModelResultGeometry? geometry;
  String? icon;
  String? iconBackgroundColor;
  String? iconMaskBaseUri;
  String? name;
  List<GoogleLocationModelResultPhotos?>? photos;
  String? placeId;
  String? reference;
  List<String?>? types;
  String? url;
  int? utcOffset;
  String? vicinity;

  GoogleLocationModelResult({
    this.addressComponents,
    this.adrAddress,
    this.formattedAddress,
    this.geometry,
    this.icon,
    this.iconBackgroundColor,
    this.iconMaskBaseUri,
    this.name,
    this.photos,
    this.placeId,
    this.reference,
    this.types,
    this.url,
    this.utcOffset,
    this.vicinity,
  });
  GoogleLocationModelResult.fromJson(Map<String, dynamic> json) {
    if (json['address_components'] != null) {
      final v = json['address_components'];
      final arr0 = <GoogleLocationModelResultAddressComponents>[];
      v.forEach((v) {
        arr0.add(GoogleLocationModelResultAddressComponents.fromJson(v));
      });
      addressComponents = arr0;
    }
    adrAddress = json['adr_address']?.toString();
    formattedAddress = json['formatted_address']?.toString();
    geometry = (json['geometry'] != null) ? GoogleLocationModelResultGeometry.fromJson(json['geometry']) : null;
    icon = json['icon']?.toString();
    iconBackgroundColor = json['icon_background_color']?.toString();
    iconMaskBaseUri = json['icon_mask_base_uri']?.toString();
    name = json['name']?.toString();
    if (json['photos'] != null) {
      final v = json['photos'];
      final arr0 = <GoogleLocationModelResultPhotos>[];
      v.forEach((v) {
        arr0.add(GoogleLocationModelResultPhotos.fromJson(v));
      });
      photos = arr0;
    }
    placeId = json['place_id']?.toString();
    reference = json['reference']?.toString();
    if (json['types'] != null) {
      final v = json['types'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      types = arr0;
    }
    url = json['url']?.toString();
    utcOffset = json['utc_offset']?.toInt();
    vicinity = json['vicinity']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (addressComponents != null) {
      final v = addressComponents;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['address_components'] = arr0;
    }
    data['adr_address'] = adrAddress;
    data['formatted_address'] = formattedAddress;
    if (geometry != null) {
      data['geometry'] = geometry!.toJson();
    }
    data['icon'] = icon;
    data['icon_background_color'] = iconBackgroundColor;
    data['icon_mask_base_uri'] = iconMaskBaseUri;
    data['name'] = name;
    if (photos != null) {
      final v = photos;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['photos'] = arr0;
    }
    data['place_id'] = placeId;
    data['reference'] = reference;
    if (types != null) {
      final v = types;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['types'] = arr0;
    }
    data['url'] = url;
    data['utc_offset'] = utcOffset;
    data['vicinity'] = vicinity;
    return data;
  }
}

class GoogleLocationModel {
/*
{
  "result": {
    "address_components": [
      {
        "long_name": "Brochet",
        "short_name": "Brochet",
        "types": [
          "locality"
        ]
      }
    ],
    "adr_address": "<span class=\"locality\">Brochet</span>, <span class=\"region\">MB</span>, <span class=\"country-name\">Canada</span>",
    "formatted_address": "Brochet, MB, Canada",
    "geometry": {
      "location": {
        "lat": 57.88158199999999,
        "lng": -101.6720515
      },
      "viewport": {
        "northeast": {
          "lat": 57.89867552901691,
          "lng": -101.6660383411926
        },
        "southwest": {
          "lat": 57.87571613722567,
          "lng": -101.6921367240961
        }
      }
    },
    "icon": "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/geocode-71.png",
    "icon_background_color": "#7B9EB0",
    "icon_mask_base_uri": "https://maps.gstatic.com/mapfiles/place_api/icons/v2/generic_pinlet",
    "name": "Brochet",
    "photos": [
      {
        "height": 1062,
        "html_attributions": [
          "<a href=\"https://maps.google.com/maps/contrib/102574123639894598769\">Sharaf Vpz</a>"
        ],
        "photo_reference": "AUGGfZn_7qn1EjuJYXSP6IFaOPaL55F4IDeYhgLEXKtrgwa0LPDDrxBCvukThBumq47EvsH_5tXMZGOsizJPoTiYcXY9ZplRKBs8NpKgjl8qkiauLW9p2BS0lO8oOtzL1CpyRi8pXRFd3OK0l04ks2Q81T7C5PmaXWmM1af0pOfb_EeA8SIw",
        "width": 2048
      }
    ],
    "place_id": "ChIJM-kkPTMsRVIRIgIuWlmrEGY",
    "reference": "ChIJM-kkPTMsRVIRIgIuWlmrEGY",
    "types": [
      "locality"
    ],
    "url": "https://maps.google.com/?q=Brochet,+MB,+Canada&ftid=0x52452c333d24e933:0x6610ab595a2e0222",
    "utc_offset": -300,
    "vicinity": "Brochet"
  },
  "status": "OK"
}
*/

  GoogleLocationModelResult? result;
  String? status;

  GoogleLocationModel({
    this.result,
    this.status,
  });
  GoogleLocationModel.fromJson(Map<String, dynamic> json) {
    result = (json['result'] != null) ? GoogleLocationModelResult.fromJson(json['result']) : null;
    status = json['status']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (result != null) {
      data['result'] = result!.toJson();
    }
    data['status'] = status;
    return data;
  }
}
