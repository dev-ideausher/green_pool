///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class RecurringRidesModelDataDriversVehicleDetailsVehiclePic {
/*
{
  "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
  "_id": "6603d738ba3fdc24d7cbce50"
} 
*/

  String? key;
  String? url;
  String? Id;

  RecurringRidesModelDataDriversVehicleDetailsVehiclePic({
    this.key,
    this.url,
    this.Id,
  });
  RecurringRidesModelDataDriversVehicleDetailsVehiclePic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    data['_id'] = Id;
    return data;
  }
}

class RecurringRidesModelDataDriversVehicleDetails {
/*
{
  "_id": "65c23bef32f497dc57fdf002",
  "driverId": "65c228fd32f497dc57fdeff8",
  "vehiclePic": {
    "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
    "_id": "6603d738ba3fdc24d7cbce50"
  },
  "model": "ModelY",
  "type": "Convertible",
  "color": "Blue",
  "year": 2024,
  "licencePlate": "LA2024",
  "createdAt": "2024-02-06T14:02:23.061Z",
  "updatedAt": "2024-03-27T08:22:16.462Z"
} 
*/

  String? Id;
  String? driverId;
  RecurringRidesModelDataDriversVehicleDetailsVehiclePic? vehiclePic;
  String? model;
  String? type;
  String? color;
  int? year;
  String? licencePlate;
  String? createdAt;
  String? updatedAt;

  RecurringRidesModelDataDriversVehicleDetails({
    this.Id,
    this.driverId,
    this.vehiclePic,
    this.model,
    this.type,
    this.color,
    this.year,
    this.licencePlate,
    this.createdAt,
    this.updatedAt,
  });
  RecurringRidesModelDataDriversVehicleDetails.fromJson(
      Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    driverId = json['driverId']?.toString();
    vehiclePic = (json['vehiclePic'] != null)
        ? RecurringRidesModelDataDriversVehicleDetailsVehiclePic.fromJson(
            json['vehiclePic'])
        : null;
    model = json['model']?.toString();
    type = json['type']?.toString();
    color = json['color']?.toString();
    year = json['year']?.toInt();
    licencePlate = json['licencePlate']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['driverId'] = driverId;
    if (vehiclePic != null) {
      data['vehiclePic'] = vehiclePic!.toJson();
    }
    data['model'] = model;
    data['type'] = type;
    data['color'] = color;
    data['year'] = year;
    data['licencePlate'] = licencePlate;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    return data;
  }
}

class RecurringRidesModelDataDriversNotificationPreferences {
/*
{
  "trip": false,
  "alerts": false,
  "payments": false,
  "transactions": false,
  "offers": false
} 
*/

  bool? trip;
  bool? alerts;
  bool? payments;
  bool? transactions;
  bool? offers;

  RecurringRidesModelDataDriversNotificationPreferences({
    this.trip,
    this.alerts,
    this.payments,
    this.transactions,
    this.offers,
  });
  RecurringRidesModelDataDriversNotificationPreferences.fromJson(
      Map<String, dynamic> json) {
    trip = json['trip'];
    alerts = json['alerts'];
    payments = json['payments'];
    transactions = json['transactions'];
    offers = json['offers'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['trip'] = trip;
    data['alerts'] = alerts;
    data['payments'] = payments;
    data['transactions'] = transactions;
    data['offers'] = offers;
    return data;
  }
}

class RecurringRidesModelDataDriversProfilePic {
/*
{
  "key": "usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg"
} 
*/

  String? key;
  String? url;

  RecurringRidesModelDataDriversProfilePic({
    this.key,
    this.url,
  });
  RecurringRidesModelDataDriversProfilePic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class RecurringRidesModelDataDriversIdPic {
/*
{
  "key": "idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg"
} 
*/

  String? key;
  String? url;

  RecurringRidesModelDataDriversIdPic({
    this.key,
    this.url,
  });
  RecurringRidesModelDataDriversIdPic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class RecurringRidesModelDataDrivers {
/*
{
  "_id": "65c228fd32f497dc57fdeff8",
  "fullName": "Rohit Shah",
  "phone": "1111122222",
  "email": "rohit@test.com",
  "dob": "2006-02-27",
  "gender": "Male",
  "isDriver": true,
  "referralCode": "C3072B8509",
  "profileStatus": true,
  "vehicleStatus": true,
  "firebaseUid": "foYFX1qnSaPETdXnF1IFVT0xpkZ2",
  "firebaseSignInProvider": "phone",
  "createdAt": "2024-02-06T12:41:33.824Z",
  "updatedAt": "2024-03-26T06:38:55.990Z",
  "idPic": {
    "key": "idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg"
  },
  "profilePic": {
    "key": "usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg"
  },
  "status": "active",
  "city": "ÓÉR",
  "pinkMode": false,
  "notificationPreferences": {
    "trip": false,
    "alerts": false,
    "payments": false,
    "transactions": false,
    "offers": false
  },
  "vehicleDetails": [
    {
      "_id": "65c23bef32f497dc57fdf002",
      "driverId": "65c228fd32f497dc57fdeff8",
      "vehiclePic": {
        "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
        "_id": "6603d738ba3fdc24d7cbce50"
      },
      "model": "ModelY",
      "type": "Convertible",
      "color": "Blue",
      "year": 2024,
      "licencePlate": "LA2024",
      "createdAt": "2024-02-06T14:02:23.061Z",
      "updatedAt": "2024-03-27T08:22:16.462Z"
    }
  ]
} 
*/

  String? Id;
  String? fullName;
  String? phone;
  String? email;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? firebaseUid;
  String? firebaseSignInProvider;
  String? createdAt;
  String? updatedAt;
  RecurringRidesModelDataDriversIdPic? idPic;
  RecurringRidesModelDataDriversProfilePic? profilePic;
  String? status;
  String? city;
  bool? pinkMode;
  RecurringRidesModelDataDriversNotificationPreferences?
      notificationPreferences;
  List<RecurringRidesModelDataDriversVehicleDetails?>? vehicleDetails;

  RecurringRidesModelDataDrivers({
    this.Id,
    this.fullName,
    this.phone,
    this.email,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.createdAt,
    this.updatedAt,
    this.idPic,
    this.profilePic,
    this.status,
    this.city,
    this.pinkMode,
    this.notificationPreferences,
    this.vehicleDetails,
  });
  RecurringRidesModelDataDrivers.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullName = json['fullName']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    idPic = (json['idPic'] != null)
        ? RecurringRidesModelDataDriversIdPic.fromJson(json['idPic'])
        : null;
    profilePic = (json['profilePic'] != null)
        ? RecurringRidesModelDataDriversProfilePic.fromJson(json['profilePic'])
        : null;
    status = json['status']?.toString();
    city = json['city']?.toString();
    pinkMode = json['pinkMode'];
    notificationPreferences = (json['notificationPreferences'] != null)
        ? RecurringRidesModelDataDriversNotificationPreferences.fromJson(
            json['notificationPreferences'])
        : null;
    if (json['vehicleDetails'] != null) {
      final v = json['vehicleDetails'];
      final arr0 = <RecurringRidesModelDataDriversVehicleDetails>[];
      v.forEach((v) {
        arr0.add(RecurringRidesModelDataDriversVehicleDetails.fromJson(v));
      });
      vehicleDetails = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullName'] = fullName;
    data['phone'] = phone;
    data['email'] = email;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    data['status'] = status;
    data['city'] = city;
    data['pinkMode'] = pinkMode;
    if (notificationPreferences != null) {
      data['notificationPreferences'] = notificationPreferences!.toJson();
    }
    if (vehicleDetails != null) {
      final v = vehicleDetails;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['vehicleDetails'] = arr0;
    }
    return data;
  }
}

class RecurringRidesModelDataRidersNotificationPreferences {
/*
{
  "trip": true,
  "alerts": true,
  "payments": true,
  "transactions": false,
  "offers": false
} 
*/

  bool? trip;
  bool? alerts;
  bool? payments;
  bool? transactions;
  bool? offers;

  RecurringRidesModelDataRidersNotificationPreferences({
    this.trip,
    this.alerts,
    this.payments,
    this.transactions,
    this.offers,
  });
  RecurringRidesModelDataRidersNotificationPreferences.fromJson(
      Map<String, dynamic> json) {
    trip = json['trip'];
    alerts = json['alerts'];
    payments = json['payments'];
    transactions = json['transactions'];
    offers = json['offers'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['trip'] = trip;
    data['alerts'] = alerts;
    data['payments'] = payments;
    data['transactions'] = transactions;
    data['offers'] = offers;
    return data;
  }
}

class RecurringRidesModelDataRidersProfilePic {
/*
{
  "key": "usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg"
} 
*/

  String? key;
  String? url;

  RecurringRidesModelDataRidersProfilePic({
    this.key,
    this.url,
  });
  RecurringRidesModelDataRidersProfilePic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class RecurringRidesModelDataRidersIdPic {
/*
{
  "key": "idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg"
} 
*/

  String? key;
  String? url;

  RecurringRidesModelDataRidersIdPic({
    this.key,
    this.url,
  });
  RecurringRidesModelDataRidersIdPic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class RecurringRidesModelDataRiders {
/*
{
  "_id": "65e03c7246e8a8aa4d62db6c",
  "fullName": "UserOne",
  "phone": "+11234512345",
  "email": "user@test.com",
  "city": "Mumbai",
  "dob": "2006-03-05",
  "gender": "Male",
  "isDriver": true,
  "referralCode": "Z8375Z0413",
  "profileStatus": true,
  "vehicleStatus": true,
  "status": "active",
  "wallet": 0,
  "firebaseUid": "n9XvgstaJCShxg2V5AmREneUYOE2",
  "firebaseSignInProvider": "phone",
  "createdAt": "2024-02-29T08:12:34.805Z",
  "updatedAt": "2024-04-09T07:48:46.026Z",
  "idPic": {
    "key": "idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg"
  },
  "profilePic": {
    "key": "usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg"
  },
  "pinkMode": false,
  "notificationPreferences": {
    "trip": true,
    "alerts": true,
    "payments": true,
    "transactions": false,
    "offers": false
  }
} 
*/

  String? Id;
  String? fullName;
  String? phone;
  String? email;
  String? city;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? status;
  int? wallet;
  String? firebaseUid;
  String? firebaseSignInProvider;
  String? createdAt;
  String? updatedAt;
  RecurringRidesModelDataRidersIdPic? idPic;
  RecurringRidesModelDataRidersProfilePic? profilePic;
  bool? pinkMode;
  RecurringRidesModelDataRidersNotificationPreferences? notificationPreferences;

  RecurringRidesModelDataRiders({
    this.Id,
    this.fullName,
    this.phone,
    this.email,
    this.city,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.status,
    this.wallet,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.createdAt,
    this.updatedAt,
    this.idPic,
    this.profilePic,
    this.pinkMode,
    this.notificationPreferences,
  });
  RecurringRidesModelDataRiders.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullName = json['fullName']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    city = json['city']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    status = json['status']?.toString();
    wallet = json['wallet']?.toInt();
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    idPic = (json['idPic'] != null)
        ? RecurringRidesModelDataRidersIdPic.fromJson(json['idPic'])
        : null;
    profilePic = (json['profilePic'] != null)
        ? RecurringRidesModelDataRidersProfilePic.fromJson(json['profilePic'])
        : null;
    pinkMode = json['pinkMode'];
    notificationPreferences = (json['notificationPreferences'] != null)
        ? RecurringRidesModelDataRidersNotificationPreferences.fromJson(
            json['notificationPreferences'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullName'] = fullName;
    data['phone'] = phone;
    data['email'] = email;
    data['city'] = city;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['status'] = status;
    data['wallet'] = wallet;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    data['pinkMode'] = pinkMode;
    if (notificationPreferences != null) {
      data['notificationPreferences'] = notificationPreferences!.toJson();
    }
    return data;
  }
}

class RecurringRidesModelDataPreferencesOther {
/*
{
  "AppreciatesConversation": false,
  "EnjoysMusic": false,
  "SmokeFree": false,
  "PetFriendly": false,
  "WinterTires": false,
  "CoolingOrHeating": false,
  "BabySeat": false,
  "HeatedSeats": false
} 
*/

  bool? AppreciatesConversation;
  bool? EnjoysMusic;
  bool? SmokeFree;
  bool? PetFriendly;
  bool? WinterTires;
  bool? CoolingOrHeating;
  bool? BabySeat;
  bool? HeatedSeats;

  RecurringRidesModelDataPreferencesOther({
    this.AppreciatesConversation,
    this.EnjoysMusic,
    this.SmokeFree,
    this.PetFriendly,
    this.WinterTires,
    this.CoolingOrHeating,
    this.BabySeat,
    this.HeatedSeats,
  });
  RecurringRidesModelDataPreferencesOther.fromJson(Map<String, dynamic> json) {
    AppreciatesConversation = json['AppreciatesConversation'];
    EnjoysMusic = json['EnjoysMusic'];
    SmokeFree = json['SmokeFree'];
    PetFriendly = json['PetFriendly'];
    WinterTires = json['WinterTires'];
    CoolingOrHeating = json['CoolingOrHeating'];
    BabySeat = json['BabySeat'];
    HeatedSeats = json['HeatedSeats'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['AppreciatesConversation'] = AppreciatesConversation;
    data['EnjoysMusic'] = EnjoysMusic;
    data['SmokeFree'] = SmokeFree;
    data['PetFriendly'] = PetFriendly;
    data['WinterTires'] = WinterTires;
    data['CoolingOrHeating'] = CoolingOrHeating;
    data['BabySeat'] = BabySeat;
    data['HeatedSeats'] = HeatedSeats;
    return data;
  }
}

class RecurringRidesModelDataPreferences {
/*
{
  "luggageType": "S",
  "other": {
    "AppreciatesConversation": false,
    "EnjoysMusic": false,
    "SmokeFree": false,
    "PetFriendly": false,
    "WinterTires": false,
    "CoolingOrHeating": false,
    "BabySeat": false,
    "HeatedSeats": false
  }
} 
*/

  String? luggageType;
  RecurringRidesModelDataPreferencesOther? other;

  RecurringRidesModelDataPreferences({
    this.luggageType,
    this.other,
  });
  RecurringRidesModelDataPreferences.fromJson(Map<String, dynamic> json) {
    luggageType = json['luggageType']?.toString();
    other = (json['other'] != null)
        ? RecurringRidesModelDataPreferencesOther.fromJson(json['other'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['luggageType'] = luggageType;
    if (other != null) {
      data['other'] = other!.toJson();
    }
    return data;
  }
}

class RecurringRidesModelDataReturnTrip {
/*
{
  "isReturnTrip": false,
  "returnDate": null,
  "returnTime": ""
} 
*/

  bool? isReturnTrip;
  String? returnDate;
  String? returnTime;

  RecurringRidesModelDataReturnTrip({
    this.isReturnTrip,
    this.returnDate,
    this.returnTime,
  });
  RecurringRidesModelDataReturnTrip.fromJson(Map<String, dynamic> json) {
    isReturnTrip = json['isReturnTrip'];
    returnDate = json['returnDate']?.toString();
    returnTime = json['returnTime']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isReturnTrip'] = isReturnTrip;
    data['returnDate'] = returnDate;
    data['returnTime'] = returnTime;
    return data;
  }
}

class RecurringRidesModelDataRecurringTrip {
/*
{
  "recurringTripIds": [
    "121212"
  ],
  "recurringTripDays": [
    1
  ]
} 
*/

  List<String?>? recurringTripIds;
  List<int?>? recurringTripDays;

  RecurringRidesModelDataRecurringTrip({
    this.recurringTripIds,
    this.recurringTripDays,
  });
  RecurringRidesModelDataRecurringTrip.fromJson(Map<String, dynamic> json) {
    if (json['recurringTripIds'] != null) {
      final v = json['recurringTripIds'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      recurringTripIds = arr0;
    }
    if (json['recurringTripDays'] != null) {
      final v = json['recurringTripDays'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      recurringTripDays = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (recurringTripIds != null) {
      final v = recurringTripIds;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripIds'] = arr0;
    }
    if (recurringTripDays != null) {
      final v = recurringTripDays;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripDays'] = arr0;
    }
    return data;
  }
}

class RecurringRidesModelDataStops {
/*
{
  "name": "chandni chok",
  "type": "Point",
  "coordinates": [
    77.23764
  ],
  "originToStopFair": "12",
  "stopToStopFair": "10",
  "stopTodestinationFair": "70",
  "_id": "65fbced977fb42b1e85b02d1"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  RecurringRidesModelDataStops({
    this.name,
    this.type,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  RecurringRidesModelDataStops.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class RecurringRidesModelDataDestination {
/*
{
  "name": "rajiv chok",
  "type": "Point",
  "coordinates": [
    71.2193128
  ]
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;

  RecurringRidesModelDataDestination({
    this.name,
    this.type,
    this.coordinates,
  });
  RecurringRidesModelDataDestination.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class RecurringRidesModelDataOrigin {
/*
{
  "name": "kashmiri gate",
  "type": "Point",
  "coordinates": [
    70.235167
  ],
  "originDestinationFair": "12"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originDestinationFair;

  RecurringRidesModelDataOrigin({
    this.name,
    this.type,
    this.coordinates,
    this.originDestinationFair,
  });
  RecurringRidesModelDataOrigin.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originDestinationFair = json['originDestinationFair']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originDestinationFair'] = originDestinationFair;
    return data;
  }
}

class RecurringRidesModelData {
/*
{
  "driverId": "65fbce5d77fb42b1e85b02cc",
  "origin": {
    "name": "kashmiri gate",
    "type": "Point",
    "coordinates": [
      70.235167
    ],
    "originDestinationFair": "12"
  },
  "destination": {
    "name": "rajiv chok",
    "type": "Point",
    "coordinates": [
      71.2193128
    ]
  },
  "stops": [
    {
      "name": "chandni chok",
      "type": "Point",
      "coordinates": [
        77.23764
      ],
      "originToStopFair": "12",
      "stopToStopFair": "10",
      "stopTodestinationFair": "70",
      "_id": "65fbced977fb42b1e85b02d1"
    }
  ],
  "tripType": "recurringTrip",
  "recurringTrip": {
    "recurringTripIds": [
      "121212"
    ],
    "recurringTripDays": [
      1
    ]
  },
  "date": "2024-03-23T00:00:00.000Z",
  "returnTrip": {
    "isReturnTrip": false,
    "returnDate": null,
    "returnTime": ""
  },
  "arrivalDate": null,
  "arrivalTime": null,
  "seatAvailable": 4,
  "preferences": {
    "luggageType": "S",
    "other": {
      "AppreciatesConversation": false,
      "EnjoysMusic": false,
      "SmokeFree": false,
      "PetFriendly": false,
      "WinterTires": false,
      "CoolingOrHeating": false,
      "BabySeat": false,
      "HeatedSeats": false
    }
  },
  "isStarted": false,
  "isCompleted": false,
  "isCancelled": false,
  "riders": [
    {
      "_id": "65e03c7246e8a8aa4d62db6c",
      "fullName": "UserOne",
      "phone": "+11234512345",
      "email": "user@test.com",
      "city": "Mumbai",
      "dob": "2006-03-05",
      "gender": "Male",
      "isDriver": true,
      "referralCode": "Z8375Z0413",
      "profileStatus": true,
      "vehicleStatus": true,
      "status": "active",
      "wallet": 0,
      "firebaseUid": "n9XvgstaJCShxg2V5AmREneUYOE2",
      "firebaseSignInProvider": "phone",
      "createdAt": "2024-02-29T08:12:34.805Z",
      "updatedAt": "2024-04-09T07:48:46.026Z",
      "idPic": {
        "key": "idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg"
      },
      "profilePic": {
        "key": "usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg"
      },
      "pinkMode": false,
      "notificationPreferences": {
        "trip": true,
        "alerts": true,
        "payments": true,
        "transactions": false,
        "offers": false
      }
    }
  ],
  "drivers": [
    {
      "_id": "65c228fd32f497dc57fdeff8",
      "fullName": "Rohit Shah",
      "phone": "1111122222",
      "email": "rohit@test.com",
      "dob": "2006-02-27",
      "gender": "Male",
      "isDriver": true,
      "referralCode": "C3072B8509",
      "profileStatus": true,
      "vehicleStatus": true,
      "firebaseUid": "foYFX1qnSaPETdXnF1IFVT0xpkZ2",
      "firebaseSignInProvider": "phone",
      "createdAt": "2024-02-06T12:41:33.824Z",
      "updatedAt": "2024-03-26T06:38:55.990Z",
      "idPic": {
        "key": "idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg"
      },
      "profilePic": {
        "key": "usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg"
      },
      "status": "active",
      "city": "ÓÉR",
      "pinkMode": false,
      "notificationPreferences": {
        "trip": false,
        "alerts": false,
        "payments": false,
        "transactions": false,
        "offers": false
      },
      "vehicleDetails": [
        {
          "_id": "65c23bef32f497dc57fdf002",
          "driverId": "65c228fd32f497dc57fdeff8",
          "vehiclePic": {
            "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
            "_id": "6603d738ba3fdc24d7cbce50"
          },
          "model": "ModelY",
          "type": "Convertible",
          "color": "Blue",
          "year": 2024,
          "licencePlate": "LA2024",
          "createdAt": "2024-02-06T14:02:23.061Z",
          "updatedAt": "2024-03-27T08:22:16.462Z"
        }
      ]
    }
  ],
  "_id": "65fbcfc177fb42b1e85b02d8",
  "createdAt": "2024-03-21T06:08:26.136Z",
  "updatedAt": "2024-03-21T06:08:26.136Z"
} 
*/

  String? driverId;
  RecurringRidesModelDataOrigin? origin;
  RecurringRidesModelDataDestination? destination;
  List<RecurringRidesModelDataStops?>? stops;
  String? tripType;
  RecurringRidesModelDataRecurringTrip? recurringTrip;
  String? date;
  RecurringRidesModelDataReturnTrip? returnTrip;
  String? arrivalDate;
  String? arrivalTime;
  int? seatAvailable;
  RecurringRidesModelDataPreferences? preferences;
  bool? isStarted;
  bool? isCompleted;
  bool? isCancelled;
  List<RecurringRidesModelDataRiders?>? riders;
  List<RecurringRidesModelDataDrivers?>? drivers;
  String? Id;
  String? createdAt;
  String? updatedAt;

  RecurringRidesModelData({
    this.driverId,
    this.origin,
    this.destination,
    this.stops,
    this.tripType,
    this.recurringTrip,
    this.date,
    this.returnTrip,
    this.arrivalDate,
    this.arrivalTime,
    this.seatAvailable,
    this.preferences,
    this.isStarted,
    this.isCompleted,
    this.isCancelled,
    this.riders,
    this.drivers,
    this.Id,
    this.createdAt,
    this.updatedAt,
  });
  RecurringRidesModelData.fromJson(Map<String, dynamic> json) {
    driverId = json['driverId']?.toString();
    origin = (json['origin'] != null)
        ? RecurringRidesModelDataOrigin.fromJson(json['origin'])
        : null;
    destination = (json['destination'] != null)
        ? RecurringRidesModelDataDestination.fromJson(json['destination'])
        : null;
    if (json['stops'] != null) {
      final v = json['stops'];
      final arr0 = <RecurringRidesModelDataStops>[];
      v.forEach((v) {
        arr0.add(RecurringRidesModelDataStops.fromJson(v));
      });
      stops = arr0;
    }
    tripType = json['tripType']?.toString();
    recurringTrip = (json['recurringTrip'] != null)
        ? RecurringRidesModelDataRecurringTrip.fromJson(json['recurringTrip'])
        : null;
    date = json['date']?.toString();
    returnTrip = (json['returnTrip'] != null)
        ? RecurringRidesModelDataReturnTrip.fromJson(json['returnTrip'])
        : null;
    arrivalDate = json['arrivalDate']?.toString();
    arrivalTime = json['arrivalTime']?.toString();
    seatAvailable = json['seatAvailable']?.toInt();
    preferences = (json['preferences'] != null)
        ? RecurringRidesModelDataPreferences.fromJson(json['preferences'])
        : null;
    isStarted = json['isStarted'];
    isCompleted = json['isCompleted'];
    isCancelled = json['isCancelled'];
    if (json['riders'] != null) {
      final v = json['riders'];
      final arr0 = <RecurringRidesModelDataRiders>[];
      v.forEach((v) {
        arr0.add(RecurringRidesModelDataRiders.fromJson(v));
      });
      riders = arr0;
    }
    if (json['drivers'] != null) {
      final v = json['drivers'];
      final arr0 = <RecurringRidesModelDataDrivers>[];
      v.forEach((v) {
        arr0.add(RecurringRidesModelDataDrivers.fromJson(v));
      });
      drivers = arr0;
    }
    Id = json['_id']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['driverId'] = driverId;
    if (origin != null) {
      data['origin'] = origin!.toJson();
    }
    if (destination != null) {
      data['destination'] = destination!.toJson();
    }
    if (stops != null) {
      final v = stops;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['stops'] = arr0;
    }
    data['tripType'] = tripType;
    if (recurringTrip != null) {
      data['recurringTrip'] = recurringTrip!.toJson();
    }
    data['date'] = date;
    if (returnTrip != null) {
      data['returnTrip'] = returnTrip!.toJson();
    }
    data['arrivalDate'] = arrivalDate;
    data['arrivalTime'] = arrivalTime;
    data['seatAvailable'] = seatAvailable;
    if (preferences != null) {
      data['preferences'] = preferences!.toJson();
    }
    data['isStarted'] = isStarted;
    data['isCompleted'] = isCompleted;
    data['isCancelled'] = isCancelled;
    if (riders != null) {
      final v = riders;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['riders'] = arr0;
    }
    if (drivers != null) {
      final v = drivers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['drivers'] = arr0;
    }
    data['_id'] = Id;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    return data;
  }
}

class RecurringRidesModel {
/*
{
  "status": true,
  "message": "success",
  "data": [
    {
      "driverId": "65fbce5d77fb42b1e85b02cc",
      "origin": {
        "name": "kashmiri gate",
        "type": "Point",
        "coordinates": [
          70.235167
        ],
        "originDestinationFair": "12"
      },
      "destination": {
        "name": "rajiv chok",
        "type": "Point",
        "coordinates": [
          71.2193128
        ]
      },
      "stops": [
        {
          "name": "chandni chok",
          "type": "Point",
          "coordinates": [
            77.23764
          ],
          "originToStopFair": "12",
          "stopToStopFair": "10",
          "stopTodestinationFair": "70",
          "_id": "65fbced977fb42b1e85b02d1"
        }
      ],
      "tripType": "recurringTrip",
      "recurringTrip": {
        "recurringTripIds": [
          "121212"
        ],
        "recurringTripDays": [
          1
        ]
      },
      "date": "2024-03-23T00:00:00.000Z",
      "returnTrip": {
        "isReturnTrip": false,
        "returnDate": null,
        "returnTime": ""
      },
      "arrivalDate": null,
      "arrivalTime": null,
      "seatAvailable": 4,
      "preferences": {
        "luggageType": "S",
        "other": {
          "AppreciatesConversation": false,
          "EnjoysMusic": false,
          "SmokeFree": false,
          "PetFriendly": false,
          "WinterTires": false,
          "CoolingOrHeating": false,
          "BabySeat": false,
          "HeatedSeats": false
        }
      },
      "isStarted": false,
      "isCompleted": false,
      "isCancelled": false,
      "riders": [
        {
          "_id": "65e03c7246e8a8aa4d62db6c",
          "fullName": "UserOne",
          "phone": "+11234512345",
          "email": "user@test.com",
          "city": "Mumbai",
          "dob": "2006-03-05",
          "gender": "Male",
          "isDriver": true,
          "referralCode": "Z8375Z0413",
          "profileStatus": true,
          "vehicleStatus": true,
          "status": "active",
          "wallet": 0,
          "firebaseUid": "n9XvgstaJCShxg2V5AmREneUYOE2",
          "firebaseSignInProvider": "phone",
          "createdAt": "2024-02-29T08:12:34.805Z",
          "updatedAt": "2024-04-09T07:48:46.026Z",
          "idPic": {
            "key": "idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/9808bc03-6648-4835-835b-d8b771b7ea24-1000000034.jpg"
          },
          "profilePic": {
            "key": "usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/4af9abdc-f508-415f-88e1-8968bdd90ca8-1000000036.jpg"
          },
          "pinkMode": false,
          "notificationPreferences": {
            "trip": true,
            "alerts": true,
            "payments": true,
            "transactions": false,
            "offers": false
          }
        }
      ],
      "drivers": [
        {
          "_id": "65c228fd32f497dc57fdeff8",
          "fullName": "Rohit Shah",
          "phone": "1111122222",
          "email": "rohit@test.com",
          "dob": "2006-02-27",
          "gender": "Male",
          "isDriver": true,
          "referralCode": "C3072B8509",
          "profileStatus": true,
          "vehicleStatus": true,
          "firebaseUid": "foYFX1qnSaPETdXnF1IFVT0xpkZ2",
          "firebaseSignInProvider": "phone",
          "createdAt": "2024-02-06T12:41:33.824Z",
          "updatedAt": "2024-03-26T06:38:55.990Z",
          "idPic": {
            "key": "idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/ef81cc68-8f59-4603-8892-430f2c8774b7-1000000035.jpg"
          },
          "profilePic": {
            "key": "usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c8374dde-a606-4595-90f9-4327ac10c1ff-1000000035.jpg"
          },
          "status": "active",
          "city": "ÓÉR",
          "pinkMode": false,
          "notificationPreferences": {
            "trip": false,
            "alerts": false,
            "payments": false,
            "transactions": false,
            "offers": false
          },
          "vehicleDetails": [
            {
              "_id": "65c23bef32f497dc57fdf002",
              "driverId": "65c228fd32f497dc57fdeff8",
              "vehiclePic": {
                "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
                "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
                "_id": "6603d738ba3fdc24d7cbce50"
              },
              "model": "ModelY",
              "type": "Convertible",
              "color": "Blue",
              "year": 2024,
              "licencePlate": "LA2024",
              "createdAt": "2024-02-06T14:02:23.061Z",
              "updatedAt": "2024-03-27T08:22:16.462Z"
            }
          ]
        }
      ],
      "_id": "65fbcfc177fb42b1e85b02d8",
      "createdAt": "2024-03-21T06:08:26.136Z",
      "updatedAt": "2024-03-21T06:08:26.136Z"
    }
  ]
} 
*/

  bool? status;
  String? message;
  List<RecurringRidesModelData?>? data;

  RecurringRidesModel({
    this.status,
    this.message,
    this.data,
  });
  RecurringRidesModel.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    message = json['message']?.toString();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <RecurringRidesModelData>[];
      v.forEach((v) {
        arr0.add(RecurringRidesModelData.fromJson(v));
      });
      this.data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    return data;
  }
}
