///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class DriverSendRequestModelDataMatchedDestinationLocation {
/*
{
  "name": "Noida Sector 18, Noida",
  "type": "Point",
  "coordinates": [
    77.32490430000001
  ]
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;

  DriverSendRequestModelDataMatchedDestinationLocation({
    this.name,
    this.type,
    this.coordinates,
  });
  DriverSendRequestModelDataMatchedDestinationLocation.fromJson(
      Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class DriverSendRequestModelDataMatchedOriginLocation {
/*
{
  "name": "297, New Delhi",
  "type": "Point",
  "coordinates": [
    77.30131209999999
  ],
  "originDestinationFair": null
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originDestinationFair;

  DriverSendRequestModelDataMatchedOriginLocation({
    this.name,
    this.type,
    this.coordinates,
    this.originDestinationFair,
  });
  DriverSendRequestModelDataMatchedOriginLocation.fromJson(
      Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originDestinationFair = json['originDestinationFair']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originDestinationFair'] = originDestinationFair;
    return data;
  }
}

class DriverSendRequestModelDataRiderDetailsProfilePic {
/*
{
  "key": "usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg"
} 
*/

  String? key;
  String? url;

  DriverSendRequestModelDataRiderDetailsProfilePic({
    this.key,
    this.url,
  });
  DriverSendRequestModelDataRiderDetailsProfilePic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class DriverSendRequestModelDataRiderDetailsIdPic {
/*
{
  "key": "idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg"
} 
*/

  String? key;
  String? url;

  DriverSendRequestModelDataRiderDetailsIdPic({
    this.key,
    this.url,
  });
  DriverSendRequestModelDataRiderDetailsIdPic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class DriverSendRequestModelDataRiderDetailsNotificationPreferences {
/*
{
  "trip": true,
  "alerts": true,
  "payments": true,
  "transactions": true,
  "offers": true
} 
*/

  bool? trip;
  bool? alerts;
  bool? payments;
  bool? transactions;
  bool? offers;

  DriverSendRequestModelDataRiderDetailsNotificationPreferences({
    this.trip,
    this.alerts,
    this.payments,
    this.transactions,
    this.offers,
  });
  DriverSendRequestModelDataRiderDetailsNotificationPreferences.fromJson(
      Map<String, dynamic> json) {
    trip = json['trip'];
    alerts = json['alerts'];
    payments = json['payments'];
    transactions = json['transactions'];
    offers = json['offers'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['trip'] = trip;
    data['alerts'] = alerts;
    data['payments'] = payments;
    data['transactions'] = transactions;
    data['offers'] = offers;
    return data;
  }
}

class DriverSendRequestModelDataRiderDetails {
/*
{
  "_id": "661d10c3cea4346b0ee267d3",
  "pinkMode": false,
  "fullName": "Ria",
  "phone": "+11212121212",
  "email": "ria@test.com",
  "city": "Rajkot",
  "dob": "2000-04-20",
  "gender": "Female",
  "isDriver": false,
  "referralCode": "S0175P2893",
  "profileStatus": true,
  "vehicleStatus": false,
  "status": "active",
  "wallet": 0,
  "notificationPreferences": {
    "trip": true,
    "alerts": true,
    "payments": true,
    "transactions": true,
    "offers": true
  },
  "firebaseUid": "YfTcEdNqhHPbYWY5bZzQxy5EwHG2",
  "firebaseSignInProvider": "phone",
  "rating": 0,
  "createdAt": "2024-04-15T11:34:27.422Z",
  "updatedAt": "2024-04-17T13:22:02.189Z",
  "idPic": {
    "key": "idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg"
  },
  "profilePic": {
    "key": "usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg"
  },
  "totalRides": 1
} 
*/

  String? Id;
  bool? pinkMode;
  String? fullName;
  String? phone;
  String? email;
  String? city;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? status;
  int? wallet;
  DriverSendRequestModelDataRiderDetailsNotificationPreferences?
      notificationPreferences;
  String? firebaseUid;
  String? firebaseSignInProvider;
  int? rating;
  String? createdAt;
  String? updatedAt;
  DriverSendRequestModelDataRiderDetailsIdPic? idPic;
  DriverSendRequestModelDataRiderDetailsProfilePic? profilePic;
  int? totalRides;

  DriverSendRequestModelDataRiderDetails({
    this.Id,
    this.pinkMode,
    this.fullName,
    this.phone,
    this.email,
    this.city,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.status,
    this.wallet,
    this.notificationPreferences,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.rating,
    this.createdAt,
    this.updatedAt,
    this.idPic,
    this.profilePic,
    this.totalRides,
  });
  DriverSendRequestModelDataRiderDetails.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    pinkMode = json['pinkMode'];
    fullName = json['fullName']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    city = json['city']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    status = json['status']?.toString();
    wallet = json['wallet']?.toInt();
    notificationPreferences = (json['notificationPreferences'] != null)
        ? DriverSendRequestModelDataRiderDetailsNotificationPreferences
            .fromJson(json['notificationPreferences'])
        : null;
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    rating = json['rating']?.toInt();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    idPic = (json['idPic'] != null)
        ? DriverSendRequestModelDataRiderDetailsIdPic.fromJson(json['idPic'])
        : null;
    profilePic = (json['profilePic'] != null)
        ? DriverSendRequestModelDataRiderDetailsProfilePic.fromJson(
            json['profilePic'])
        : null;
    totalRides = json['totalRides']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['pinkMode'] = pinkMode;
    data['fullName'] = fullName;
    data['phone'] = phone;
    data['email'] = email;
    data['city'] = city;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['status'] = status;
    data['wallet'] = wallet;
    if (notificationPreferences != null) {
      data['notificationPreferences'] = notificationPreferences!.toJson();
    }
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    data['rating'] = rating;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    data['totalRides'] = totalRides;
    return data;
  }
}

class DriverSendRequestModelDataPreferencesOther {
/*
{
  "AppreciatesConversation": false,
  "EnjoysMusic": false,
  "SmokeFree": false,
  "PetFriendly": false,
  "WinterTires": false,
  "CoolingOrHeating": false,
  "BabySeat": false,
  "HeatedSeats": false
} 
*/

  bool? AppreciatesConversation;
  bool? EnjoysMusic;
  bool? SmokeFree;
  bool? PetFriendly;
  bool? WinterTires;
  bool? CoolingOrHeating;
  bool? BabySeat;
  bool? HeatedSeats;

  DriverSendRequestModelDataPreferencesOther({
    this.AppreciatesConversation,
    this.EnjoysMusic,
    this.SmokeFree,
    this.PetFriendly,
    this.WinterTires,
    this.CoolingOrHeating,
    this.BabySeat,
    this.HeatedSeats,
  });
  DriverSendRequestModelDataPreferencesOther.fromJson(
      Map<String, dynamic> json) {
    AppreciatesConversation = json['AppreciatesConversation'];
    EnjoysMusic = json['EnjoysMusic'];
    SmokeFree = json['SmokeFree'];
    PetFriendly = json['PetFriendly'];
    WinterTires = json['WinterTires'];
    CoolingOrHeating = json['CoolingOrHeating'];
    BabySeat = json['BabySeat'];
    HeatedSeats = json['HeatedSeats'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['AppreciatesConversation'] = AppreciatesConversation;
    data['EnjoysMusic'] = EnjoysMusic;
    data['SmokeFree'] = SmokeFree;
    data['PetFriendly'] = PetFriendly;
    data['WinterTires'] = WinterTires;
    data['CoolingOrHeating'] = CoolingOrHeating;
    data['BabySeat'] = BabySeat;
    data['HeatedSeats'] = HeatedSeats;
    return data;
  }
}

class DriverSendRequestModelDataPreferences {
/*
{
  "other": {
    "AppreciatesConversation": false,
    "EnjoysMusic": false,
    "SmokeFree": false,
    "PetFriendly": false,
    "WinterTires": false,
    "CoolingOrHeating": false,
    "BabySeat": false,
    "HeatedSeats": false
  },
  "luggageType": null
} 
*/

  DriverSendRequestModelDataPreferencesOther? other;
  String? luggageType;

  DriverSendRequestModelDataPreferences({
    this.other,
    this.luggageType,
  });
  DriverSendRequestModelDataPreferences.fromJson(Map<String, dynamic> json) {
    other = (json['other'] != null)
        ? DriverSendRequestModelDataPreferencesOther.fromJson(json['other'])
        : null;
    luggageType = json['luggageType']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (other != null) {
      data['other'] = other!.toJson();
    }
    data['luggageType'] = luggageType;
    return data;
  }
}

class DriverSendRequestModelDataReturnTrip {
/*
{
  "returnTripId": null,
  "isReturnTrip": false,
  "returnDate": null,
  "returnTime": null
} 
*/

  String? returnTripId;
  bool? isReturnTrip;
  String? returnDate;
  String? returnTime;

  DriverSendRequestModelDataReturnTrip({
    this.returnTripId,
    this.isReturnTrip,
    this.returnDate,
    this.returnTime,
  });
  DriverSendRequestModelDataReturnTrip.fromJson(Map<String, dynamic> json) {
    returnTripId = json['returnTripId']?.toString();
    isReturnTrip = json['isReturnTrip'];
    returnDate = json['returnDate']?.toString();
    returnTime = json['returnTime']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['returnTripId'] = returnTripId;
    data['isReturnTrip'] = isReturnTrip;
    data['returnDate'] = returnDate;
    data['returnTime'] = returnTime;
    return data;
  }
}

class DriverSendRequestModelDataRecurringTrip {
/*
{
  "recurringTripIds": [
    "121212"
  ],
  "recurringTripDays": [
    1
  ],
  "isRecurringTripEnabled": false
} 
*/

  List<String?>? recurringTripIds;
  List<int?>? recurringTripDays;
  bool? isRecurringTripEnabled;

  DriverSendRequestModelDataRecurringTrip({
    this.recurringTripIds,
    this.recurringTripDays,
    this.isRecurringTripEnabled,
  });
  DriverSendRequestModelDataRecurringTrip.fromJson(Map<String, dynamic> json) {
    if (json['recurringTripIds'] != null) {
      final v = json['recurringTripIds'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      recurringTripIds = arr0;
    }
    if (json['recurringTripDays'] != null) {
      final v = json['recurringTripDays'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      recurringTripDays = arr0;
    }
    isRecurringTripEnabled = json['isRecurringTripEnabled'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (recurringTripIds != null) {
      final v = recurringTripIds;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripIds'] = arr0;
    }
    if (recurringTripDays != null) {
      final v = recurringTripDays;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripDays'] = arr0;
    }
    data['isRecurringTripEnabled'] = isRecurringTripEnabled;
    return data;
  }
}

class DriverSendRequestModelDataDestination {
/*
{
  "name": "Noida Sector 18, Noida",
  "type": "Point",
  "coordinates": [
    77.32490430000001
  ]
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;

  DriverSendRequestModelDataDestination({
    this.name,
    this.type,
    this.coordinates,
  });
  DriverSendRequestModelDataDestination.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class DriverSendRequestModelDataOrigin {
/*
{
  "name": "297, New Delhi",
  "type": "Point",
  "coordinates": [
    77.30131209999999
  ],
  "originDestinationFair": null
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originDestinationFair;

  DriverSendRequestModelDataOrigin({
    this.name,
    this.type,
    this.coordinates,
    this.originDestinationFair,
  });
  DriverSendRequestModelDataOrigin.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originDestinationFair = json['originDestinationFair']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originDestinationFair'] = originDestinationFair;
    return data;
  }
}

class DriverSendRequestModelData {
/*
{
  "_id": "662a0cddd97bf339412b6ea1",
  "riderId": "661d10c3cea4346b0ee267d3",
  "origin": {
    "name": "297, New Delhi",
    "type": "Point",
    "coordinates": [
      77.30131209999999
    ],
    "originDestinationFair": null
  },
  "destination": {
    "name": "Noida Sector 18, Noida",
    "type": "Point",
    "coordinates": [
      77.32490430000001
    ]
  },
  "tripType": null,
  "recurringTrip": {
    "recurringTripIds": [
      "121212"
    ],
    "recurringTripDays": [
      1
    ],
    "isRecurringTripEnabled": false
  },
  "date": "2024-04-30T00:00:00.000Z",
  "time": "",
  "returnTrip": {
    "returnTripId": null,
    "isReturnTrip": false,
    "returnDate": null,
    "returnTime": null
  },
  "arrivalDate": null,
  "arrivalTime": null,
  "seatAvailable": 1,
  "preferences": {
    "other": {
      "AppreciatesConversation": false,
      "EnjoysMusic": false,
      "SmokeFree": false,
      "PetFriendly": false,
      "WinterTires": false,
      "CoolingOrHeating": false,
      "BabySeat": false,
      "HeatedSeats": false
    },
    "luggageType": null
  },
  "isStarted": false,
  "isCompleted": false,
  "isCancelled": false,
  "description": null,
  "createdAt": "2024-04-25T07:57:17.458Z",
  "updatedAt": "2024-04-25T07:57:17.458Z",
  "riderDetails": [
    {
      "_id": "661d10c3cea4346b0ee267d3",
      "pinkMode": false,
      "fullName": "Ria",
      "phone": "+11212121212",
      "email": "ria@test.com",
      "city": "Rajkot",
      "dob": "2000-04-20",
      "gender": "Female",
      "isDriver": false,
      "referralCode": "S0175P2893",
      "profileStatus": true,
      "vehicleStatus": false,
      "status": "active",
      "wallet": 0,
      "notificationPreferences": {
        "trip": true,
        "alerts": true,
        "payments": true,
        "transactions": true,
        "offers": true
      },
      "firebaseUid": "YfTcEdNqhHPbYWY5bZzQxy5EwHG2",
      "firebaseSignInProvider": "phone",
      "rating": 0,
      "createdAt": "2024-04-15T11:34:27.422Z",
      "updatedAt": "2024-04-17T13:22:02.189Z",
      "idPic": {
        "key": "idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg"
      },
      "profilePic": {
        "key": "usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg"
      },
      "totalRides": 1
    }
  ],
  "distanceFromOrigin": 0,
  "stopsDistances": [
    82.41833502449377
  ],
  "minStopDistance": 82.41833502449377,
  "matchedOriginLocation": {
    "name": "297, New Delhi",
    "type": "Point",
    "coordinates": [
      77.30131209999999
    ],
    "originDestinationFair": null
  },
  "distanceFromDestination": 0,
  "stopsDestinationDistances": [
    82.43516409682579
  ],
  "minStopDestinationDistance": 82.43516409682579,
  "matchedDestinationLocation": {
    "name": "Noida Sector 18, Noida",
    "type": "Point",
    "coordinates": [
      77.32490430000001
    ]
  }
} 
*/

  String? Id;
  String? riderId;
  DriverSendRequestModelDataOrigin? origin;
  DriverSendRequestModelDataDestination? destination;
  String? tripType;
  DriverSendRequestModelDataRecurringTrip? recurringTrip;
  String? date;
  String? time;
  DriverSendRequestModelDataReturnTrip? returnTrip;
  String? arrivalDate;
  String? arrivalTime;
  int? seatAvailable;
  DriverSendRequestModelDataPreferences? preferences;
  bool? isStarted;
  bool? isCompleted;
  bool? isCancelled;
  String? description;
  String? createdAt;
  String? updatedAt;
  List<DriverSendRequestModelDataRiderDetails?>? riderDetails;
  int? distanceFromOrigin;
  List<double?>? stopsDistances;
  double? minStopDistance;
  DriverSendRequestModelDataMatchedOriginLocation? matchedOriginLocation;
  int? distanceFromDestination;
  List<double?>? stopsDestinationDistances;
  double? minStopDestinationDistance;
  DriverSendRequestModelDataMatchedDestinationLocation?
      matchedDestinationLocation;

  DriverSendRequestModelData({
    this.Id,
    this.riderId,
    this.origin,
    this.destination,
    this.tripType,
    this.recurringTrip,
    this.date,
    this.time,
    this.returnTrip,
    this.arrivalDate,
    this.arrivalTime,
    this.seatAvailable,
    this.preferences,
    this.isStarted,
    this.isCompleted,
    this.isCancelled,
    this.description,
    this.createdAt,
    this.updatedAt,
    this.riderDetails,
    this.distanceFromOrigin,
    this.stopsDistances,
    this.minStopDistance,
    this.matchedOriginLocation,
    this.distanceFromDestination,
    this.stopsDestinationDistances,
    this.minStopDestinationDistance,
    this.matchedDestinationLocation,
  });
  DriverSendRequestModelData.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    riderId = json['riderId']?.toString();
    origin = (json['origin'] != null)
        ? DriverSendRequestModelDataOrigin.fromJson(json['origin'])
        : null;
    destination = (json['destination'] != null)
        ? DriverSendRequestModelDataDestination.fromJson(json['destination'])
        : null;
    tripType = json['tripType']?.toString();
    recurringTrip = (json['recurringTrip'] != null)
        ? DriverSendRequestModelDataRecurringTrip.fromJson(
            json['recurringTrip'])
        : null;
    date = json['date']?.toString();
    time = json['time']?.toString();
    returnTrip = (json['returnTrip'] != null)
        ? DriverSendRequestModelDataReturnTrip.fromJson(json['returnTrip'])
        : null;
    arrivalDate = json['arrivalDate']?.toString();
    arrivalTime = json['arrivalTime']?.toString();
    seatAvailable = json['seatAvailable']?.toInt();
    preferences = (json['preferences'] != null)
        ? DriverSendRequestModelDataPreferences.fromJson(json['preferences'])
        : null;
    isStarted = json['isStarted'];
    isCompleted = json['isCompleted'];
    isCancelled = json['isCancelled'];
    description = json['description']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    if (json['riderDetails'] != null) {
      final v = json['riderDetails'];
      final arr0 = <DriverSendRequestModelDataRiderDetails>[];
      v.forEach((v) {
        arr0.add(DriverSendRequestModelDataRiderDetails.fromJson(v));
      });
      riderDetails = arr0;
    }
    distanceFromOrigin = json['distanceFromOrigin']?.toInt();
    if (json['stopsDistances'] != null) {
      final v = json['stopsDistances'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      stopsDistances = arr0;
    }
    minStopDistance = json['minStopDistance']?.toDouble();
    matchedOriginLocation = (json['matchedOriginLocation'] != null)
        ? DriverSendRequestModelDataMatchedOriginLocation.fromJson(
            json['matchedOriginLocation'])
        : null;
    distanceFromDestination = json['distanceFromDestination']?.toInt();
    if (json['stopsDestinationDistances'] != null) {
      final v = json['stopsDestinationDistances'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      stopsDestinationDistances = arr0;
    }
    minStopDestinationDistance = json['minStopDestinationDistance']?.toDouble();
    matchedDestinationLocation = (json['matchedDestinationLocation'] != null)
        ? DriverSendRequestModelDataMatchedDestinationLocation.fromJson(
            json['matchedDestinationLocation'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['riderId'] = riderId;
    if (origin != null) {
      data['origin'] = origin!.toJson();
    }
    if (destination != null) {
      data['destination'] = destination!.toJson();
    }
    data['tripType'] = tripType;
    if (recurringTrip != null) {
      data['recurringTrip'] = recurringTrip!.toJson();
    }
    data['date'] = date;
    data['time'] = time;
    if (returnTrip != null) {
      data['returnTrip'] = returnTrip!.toJson();
    }
    data['arrivalDate'] = arrivalDate;
    data['arrivalTime'] = arrivalTime;
    data['seatAvailable'] = seatAvailable;
    if (preferences != null) {
      data['preferences'] = preferences!.toJson();
    }
    data['isStarted'] = isStarted;
    data['isCompleted'] = isCompleted;
    data['isCancelled'] = isCancelled;
    data['description'] = description;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (riderDetails != null) {
      final v = riderDetails;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['riderDetails'] = arr0;
    }
    data['distanceFromOrigin'] = distanceFromOrigin;
    if (stopsDistances != null) {
      final v = stopsDistances;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['stopsDistances'] = arr0;
    }
    data['minStopDistance'] = minStopDistance;
    if (matchedOriginLocation != null) {
      data['matchedOriginLocation'] = matchedOriginLocation!.toJson();
    }
    data['distanceFromDestination'] = distanceFromDestination;
    if (stopsDestinationDistances != null) {
      final v = stopsDestinationDistances;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['stopsDestinationDistances'] = arr0;
    }
    data['minStopDestinationDistance'] = minStopDestinationDistance;
    if (matchedDestinationLocation != null) {
      data['matchedDestinationLocation'] = matchedDestinationLocation!.toJson();
    }
    return data;
  }
}

class DriverSendRequestModel {
/*
{
  "status": true,
  "message": "success",
  "data": [
    {
      "_id": "662a0cddd97bf339412b6ea1",
      "riderId": "661d10c3cea4346b0ee267d3",
      "origin": {
        "name": "297, New Delhi",
        "type": "Point",
        "coordinates": [
          77.30131209999999
        ],
        "originDestinationFair": null
      },
      "destination": {
        "name": "Noida Sector 18, Noida",
        "type": "Point",
        "coordinates": [
          77.32490430000001
        ]
      },
      "tripType": null,
      "recurringTrip": {
        "recurringTripIds": [
          "121212"
        ],
        "recurringTripDays": [
          1
        ],
        "isRecurringTripEnabled": false
      },
      "date": "2024-04-30T00:00:00.000Z",
      "time": "",
      "returnTrip": {
        "returnTripId": null,
        "isReturnTrip": false,
        "returnDate": null,
        "returnTime": null
      },
      "arrivalDate": null,
      "arrivalTime": null,
      "seatAvailable": 1,
      "preferences": {
        "other": {
          "AppreciatesConversation": false,
          "EnjoysMusic": false,
          "SmokeFree": false,
          "PetFriendly": false,
          "WinterTires": false,
          "CoolingOrHeating": false,
          "BabySeat": false,
          "HeatedSeats": false
        },
        "luggageType": null
      },
      "isStarted": false,
      "isCompleted": false,
      "isCancelled": false,
      "description": null,
      "createdAt": "2024-04-25T07:57:17.458Z",
      "updatedAt": "2024-04-25T07:57:17.458Z",
      "riderDetails": [
        {
          "_id": "661d10c3cea4346b0ee267d3",
          "pinkMode": false,
          "fullName": "Ria",
          "phone": "+11212121212",
          "email": "ria@test.com",
          "city": "Rajkot",
          "dob": "2000-04-20",
          "gender": "Female",
          "isDriver": false,
          "referralCode": "S0175P2893",
          "profileStatus": true,
          "vehicleStatus": false,
          "status": "active",
          "wallet": 0,
          "notificationPreferences": {
            "trip": true,
            "alerts": true,
            "payments": true,
            "transactions": true,
            "offers": true
          },
          "firebaseUid": "YfTcEdNqhHPbYWY5bZzQxy5EwHG2",
          "firebaseSignInProvider": "phone",
          "rating": 0,
          "createdAt": "2024-04-15T11:34:27.422Z",
          "updatedAt": "2024-04-17T13:22:02.189Z",
          "idPic": {
            "key": "idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/bf9018c7-ad37-47f0-b648-075e54474b8f-1000000034.jpg"
          },
          "profilePic": {
            "key": "usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/f8536123-8f53-4c8f-8acd-a033c30af1d9-1000000036.jpg"
          },
          "totalRides": 1
        }
      ],
      "distanceFromOrigin": 0,
      "stopsDistances": [
        82.41833502449377
      ],
      "minStopDistance": 82.41833502449377,
      "matchedOriginLocation": {
        "name": "297, New Delhi",
        "type": "Point",
        "coordinates": [
          77.30131209999999
        ],
        "originDestinationFair": null
      },
      "distanceFromDestination": 0,
      "stopsDestinationDistances": [
        82.43516409682579
      ],
      "minStopDestinationDistance": 82.43516409682579,
      "matchedDestinationLocation": {
        "name": "Noida Sector 18, Noida",
        "type": "Point",
        "coordinates": [
          77.32490430000001
        ]
      }
    }
  ]
} 
*/

  bool? status;
  String? message;
  List<DriverSendRequestModelData?>? data;

  DriverSendRequestModel({
    this.status,
    this.message,
    this.data,
  });
  DriverSendRequestModel.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    message = json['message']?.toString();
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <DriverSendRequestModelData>[];
      v.forEach((v) {
        arr0.add(DriverSendRequestModelData.fromJson(v));
      });
      this.data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['message'] = message;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    return data;
  }
}
