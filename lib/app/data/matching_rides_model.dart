///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic {
/*
{
  "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
  "_id": "6603d738ba3fdc24d7cbce50"
} 
*/

  String? key;
  String? url;
  String? Id;

  MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic({
    this.key,
    this.url,
    this.Id,
  });
  MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsVehicleDetails {
/*
{
  "_id": "65c23bef32f497dc57fdf002",
  "driverId": "65c228fd32f497dc57fdeff8",
  "vehiclePic": {
    "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
    "_id": "6603d738ba3fdc24d7cbce50"
  },
  "model": "creta",
  "type": "Convertible",
  "color": "Black",
  "year": 2024,
  "licencePlate": "LA2024",
  "createdAt": "2024-02-06T14:02:23.061Z",
  "updatedAt": "2024-04-15T04:53:34.316Z"
} 
*/

  String? Id;
  String? driverId;
  MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic? vehiclePic;
  String? model;
  String? type;
  String? color;
  int? year;
  String? licencePlate;
  String? createdAt;
  String? updatedAt;

  MatchingRidesModelDataDriverDetailsVehicleDetails({
    this.Id,
    this.driverId,
    this.vehiclePic,
    this.model,
    this.type,
    this.color,
    this.year,
    this.licencePlate,
    this.createdAt,
    this.updatedAt,
  });
  MatchingRidesModelDataDriverDetailsVehicleDetails.fromJson(
      Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    driverId = json['driverId']?.toString();
    vehiclePic = (json['vehiclePic'] != null)
        ? MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic.fromJson(
            json['vehiclePic'])
        : null;
    model = json['model']?.toString();
    type = json['type']?.toString();
    color = json['color']?.toString();
    year = json['year']?.toInt();
    licencePlate = json['licencePlate']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['driverId'] = driverId;
    if (vehiclePic != null) {
      data['vehiclePic'] = vehiclePic!.toJson();
    }
    data['model'] = model;
    data['type'] = type;
    data['color'] = color;
    data['year'] = year;
    data['licencePlate'] = licencePlate;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsSuspensionDetails {
/*
{
  "dateFrom": "2024-07-02T07:06:39.626Z",
  "dateTo": "2024-07-02T07:06:39.626Z",
  "cancelPolicy": "665d7b1bd2ce0392ad50be4c"
} 
*/

  String? dateFrom;
  String? dateTo;
  String? cancelPolicy;

  MatchingRidesModelDataDriverDetailsSuspensionDetails({
    this.dateFrom,
    this.dateTo,
    this.cancelPolicy,
  });
  MatchingRidesModelDataDriverDetailsSuspensionDetails.fromJson(
      Map<String, dynamic> json) {
    dateFrom = json['dateFrom']?.toString();
    dateTo = json['dateTo']?.toString();
    cancelPolicy = json['cancelPolicy']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['dateFrom'] = dateFrom;
    data['dateTo'] = dateTo;
    data['cancelPolicy'] = cancelPolicy;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsNotificationPreferences {
/*
{
  "trip": true,
  "alerts": true,
  "payments": true,
  "transactions": true,
  "offers": true
} 
*/

  bool? trip;
  bool? alerts;
  bool? payments;
  bool? transactions;
  bool? offers;

  MatchingRidesModelDataDriverDetailsNotificationPreferences({
    this.trip,
    this.alerts,
    this.payments,
    this.transactions,
    this.offers,
  });
  MatchingRidesModelDataDriverDetailsNotificationPreferences.fromJson(
      Map<String, dynamic> json) {
    trip = json['trip'];
    alerts = json['alerts'];
    payments = json['payments'];
    transactions = json['transactions'];
    offers = json['offers'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['trip'] = trip;
    data['alerts'] = alerts;
    data['payments'] = payments;
    data['transactions'] = transactions;
    data['offers'] = offers;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsProfilePic {
/*
{
  "key": "usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
  "_id": "664af3b5cd651d9acab11363"
} 
*/

  String? key;
  String? url;
  String? Id;

  MatchingRidesModelDataDriverDetailsProfilePic({
    this.key,
    this.url,
    this.Id,
  });
  MatchingRidesModelDataDriverDetailsProfilePic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsIdPic {
/*
{
  "key": "idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
  "_id": "664af3b5cd651d9acab11364"
} 
*/

  String? key;
  String? url;
  String? Id;

  MatchingRidesModelDataDriverDetailsIdPic({
    this.key,
    this.url,
    this.Id,
  });
  MatchingRidesModelDataDriverDetailsIdPic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataDriverDetails {
/*
{
  "_id": "65c228fd32f497dc57fdeff8",
  "fullName": "Amar",
  "phone": "+11111122222",
  "email": "amar@ideausher.com",
  "dob": "2006-05-25",
  "gender": "Male",
  "isDriver": true,
  "referralCode": "C3072B8509",
  "profileStatus": true,
  "vehicleStatus": true,
  "firebaseUid": "foYFX1qnSaPETdXnF1IFVT0xpkZ2",
  "firebaseSignInProvider": "phone",
  "createdAt": "2024-02-06T12:41:33.824Z",
  "updatedAt": "2024-07-08T07:12:13.245Z",
  "idPic": {
    "key": "idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
    "_id": "664af3b5cd651d9acab11364"
  },
  "profilePic": {
    "key": "usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
    "_id": "664af3b5cd651d9acab11363"
  },
  "status": "active",
  "city": "Zurich, Ontario",
  "pinkMode": false,
  "notificationPreferences": {
    "trip": true,
    "alerts": true,
    "payments": true,
    "transactions": true,
    "offers": true
  },
  "rating": 0,
  "totalRides": 0,
  "isRegister": true,
  "role": "user",
  "rideCancellationCount": 1,
  "connected_account_id": "acct_1POa6QSBsf3jz2sG",
  "suspensionDetails": {
    "dateFrom": "2024-07-02T07:06:39.626Z",
    "dateTo": "2024-07-02T07:06:39.626Z",
    "cancelPolicy": "665d7b1bd2ce0392ad50be4c"
  },
  "vehicleDetails": [
    {
      "_id": "65c23bef32f497dc57fdf002",
      "driverId": "65c228fd32f497dc57fdeff8",
      "vehiclePic": {
        "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
        "_id": "6603d738ba3fdc24d7cbce50"
      },
      "model": "creta",
      "type": "Convertible",
      "color": "Black",
      "year": 2024,
      "licencePlate": "LA2024",
      "createdAt": "2024-02-06T14:02:23.061Z",
      "updatedAt": "2024-04-15T04:53:34.316Z"
    }
  ]
} 
*/

  String? Id;
  String? fullName;
  String? phone;
  String? email;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? firebaseUid;
  String? firebaseSignInProvider;
  String? createdAt;
  String? updatedAt;
  MatchingRidesModelDataDriverDetailsIdPic? idPic;
  MatchingRidesModelDataDriverDetailsProfilePic? profilePic;
  String? status;
  String? city;
  bool? pinkMode;
  MatchingRidesModelDataDriverDetailsNotificationPreferences?
      notificationPreferences;
  int? rating;
  int? totalRides;
  bool? isRegister;
  String? role;
  int? rideCancellationCount;
  String? connectedAccountId;
  MatchingRidesModelDataDriverDetailsSuspensionDetails? suspensionDetails;
  List<MatchingRidesModelDataDriverDetailsVehicleDetails?>? vehicleDetails;

  MatchingRidesModelDataDriverDetails({
    this.Id,
    this.fullName,
    this.phone,
    this.email,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.createdAt,
    this.updatedAt,
    this.idPic,
    this.profilePic,
    this.status,
    this.city,
    this.pinkMode,
    this.notificationPreferences,
    this.rating,
    this.totalRides,
    this.isRegister,
    this.role,
    this.rideCancellationCount,
    this.connectedAccountId,
    this.suspensionDetails,
    this.vehicleDetails,
  });
  MatchingRidesModelDataDriverDetails.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullName = json['fullName']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    idPic = (json['idPic'] != null)
        ? MatchingRidesModelDataDriverDetailsIdPic.fromJson(json['idPic'])
        : null;
    profilePic = (json['profilePic'] != null)
        ? MatchingRidesModelDataDriverDetailsProfilePic.fromJson(
            json['profilePic'])
        : null;
    status = json['status']?.toString();
    city = json['city']?.toString();
    pinkMode = json['pinkMode'];
    notificationPreferences = (json['notificationPreferences'] != null)
        ? MatchingRidesModelDataDriverDetailsNotificationPreferences.fromJson(
            json['notificationPreferences'])
        : null;
    rating = json['rating']?.toInt();
    totalRides = json['totalRides']?.toInt();
    isRegister = json['isRegister'];
    role = json['role']?.toString();
    rideCancellationCount = json['rideCancellationCount']?.toInt();
    connectedAccountId = json['connected_account_id']?.toString();
    suspensionDetails = (json['suspensionDetails'] != null)
        ? MatchingRidesModelDataDriverDetailsSuspensionDetails.fromJson(
            json['suspensionDetails'])
        : null;
    if (json['vehicleDetails'] != null) {
      final v = json['vehicleDetails'];
      final arr0 = <MatchingRidesModelDataDriverDetailsVehicleDetails>[];
      v.forEach((v) {
        arr0.add(MatchingRidesModelDataDriverDetailsVehicleDetails.fromJson(v));
      });
      vehicleDetails = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullName'] = fullName;
    data['phone'] = phone;
    data['email'] = email;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    data['status'] = status;
    data['city'] = city;
    data['pinkMode'] = pinkMode;
    if (notificationPreferences != null) {
      data['notificationPreferences'] = notificationPreferences!.toJson();
    }
    data['rating'] = rating;
    data['totalRides'] = totalRides;
    data['isRegister'] = isRegister;
    data['role'] = role;
    data['rideCancellationCount'] = rideCancellationCount;
    data['connected_account_id'] = connectedAccountId;
    if (suspensionDetails != null) {
      data['suspensionDetails'] = suspensionDetails!.toJson();
    }
    if (vehicleDetails != null) {
      final v = vehicleDetails;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['vehicleDetails'] = arr0;
    }
    return data;
  }
}

class MatchingRidesModelDataRidersDetatilsProfilePic {
/*
{
  "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
} 
*/

  String? key;
  String? url;

  MatchingRidesModelDataRidersDetatilsProfilePic({
    this.key,
    this.url,
  });
  MatchingRidesModelDataRidersDetatilsProfilePic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class MatchingRidesModelDataRidersDetatilsIdPic {
/*
{
  "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
} 
*/

  String? key;
  String? url;

  MatchingRidesModelDataRidersDetatilsIdPic({
    this.key,
    this.url,
  });
  MatchingRidesModelDataRidersDetatilsIdPic.fromJson(
      Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class MatchingRidesModelDataRidersDetatils {
/*
{
  "_id": "65c22d5672eca065a18fa015",
  "fullName": "rider2",
  "city": "Mumbai",
  "phone": null,
  "email": "rider2@gmail.com",
  "dob": null,
  "gender": null,
  "isDriver": false,
  "referralCode": "U4776F6995",
  "profileStatus": false,
  "vehicleStatus": false,
  "firebaseUid": "o32hfB4Ba0RAHgUbirbPOWfb7zU2",
  "firebaseSignInProvider": "password",
  "idPic": {
    "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
  },
  "profilePic": {
    "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
  },
  "createdAt": "2024-02-06T13:00:06.059Z",
  "updatedAt": "2024-02-06T13:00:06.059Z",
  "status": "active"
} 
*/

  String? Id;
  String? fullName;
  String? city;
  String? phone;
  String? email;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? firebaseUid;
  String? firebaseSignInProvider;
  MatchingRidesModelDataRidersDetatilsIdPic? idPic;
  MatchingRidesModelDataRidersDetatilsProfilePic? profilePic;
  String? createdAt;
  String? updatedAt;
  String? status;

  MatchingRidesModelDataRidersDetatils({
    this.Id,
    this.fullName,
    this.city,
    this.phone,
    this.email,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.idPic,
    this.profilePic,
    this.createdAt,
    this.updatedAt,
    this.status,
  });
  MatchingRidesModelDataRidersDetatils.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullName = json['fullName']?.toString();
    city = json['city']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    idPic = (json['idPic'] != null)
        ? MatchingRidesModelDataRidersDetatilsIdPic.fromJson(json['idPic'])
        : null;
    profilePic = (json['profilePic'] != null)
        ? MatchingRidesModelDataRidersDetatilsProfilePic.fromJson(
            json['profilePic'])
        : null;
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    status = json['status']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullName'] = fullName;
    data['city'] = city;
    data['phone'] = phone;
    data['email'] = email;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['status'] = status;
    return data;
  }
}

class MatchingRidesModelDataMatchedDestinationLocation {
/*
{
  "name": "",
  "coordinates": [
    -79.6333674
  ],
  "originToStopFair": "",
  "stopToStopFair": "",
  "stopTodestinationFair": "",
  "_id": "668b8f0b6195920124c264e9"
} 
*/

  String? name;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  MatchingRidesModelDataMatchedDestinationLocation({
    this.name,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  MatchingRidesModelDataMatchedDestinationLocation.fromJson(
      Map<String, dynamic> json) {
    name = json['name']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataMatchedOriginLocation {
/*
{
  "name": "",
  "coordinates": [
    -79.6333674
  ],
  "originToStopFair": "",
  "stopToStopFair": "",
  "stopTodestinationFair": "",
  "_id": "668b8f0b6195920124c264e9"
} 
*/

  String? name;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  MatchingRidesModelDataMatchedOriginLocation({
    this.name,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  MatchingRidesModelDataMatchedOriginLocation.fromJson(
      Map<String, dynamic> json) {
    name = json['name']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataPreferencesOther {
/*
{
  "AppreciatesConversation": true,
  "EnjoysMusic": true,
  "SmokeFree": true,
  "PetFriendly": true,
  "WinterTires": true,
  "CoolingOrHeating": true,
  "BabySeat": true,
  "HeatedSeats": true
} 
*/

  bool? AppreciatesConversation;
  bool? EnjoysMusic;
  bool? SmokeFree;
  bool? PetFriendly;
  bool? WinterTires;
  bool? CoolingOrHeating;
  bool? BabySeat;
  bool? HeatedSeats;

  MatchingRidesModelDataPreferencesOther({
    this.AppreciatesConversation,
    this.EnjoysMusic,
    this.SmokeFree,
    this.PetFriendly,
    this.WinterTires,
    this.CoolingOrHeating,
    this.BabySeat,
    this.HeatedSeats,
  });
  MatchingRidesModelDataPreferencesOther.fromJson(Map<String, dynamic> json) {
    AppreciatesConversation = json['AppreciatesConversation'];
    EnjoysMusic = json['EnjoysMusic'];
    SmokeFree = json['SmokeFree'];
    PetFriendly = json['PetFriendly'];
    WinterTires = json['WinterTires'];
    CoolingOrHeating = json['CoolingOrHeating'];
    BabySeat = json['BabySeat'];
    HeatedSeats = json['HeatedSeats'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['AppreciatesConversation'] = AppreciatesConversation;
    data['EnjoysMusic'] = EnjoysMusic;
    data['SmokeFree'] = SmokeFree;
    data['PetFriendly'] = PetFriendly;
    data['WinterTires'] = WinterTires;
    data['CoolingOrHeating'] = CoolingOrHeating;
    data['BabySeat'] = BabySeat;
    data['HeatedSeats'] = HeatedSeats;
    return data;
  }
}

class MatchingRidesModelDataPreferences {
/*
{
  "luggageType": "S",
  "other": {
    "AppreciatesConversation": true,
    "EnjoysMusic": true,
    "SmokeFree": true,
    "PetFriendly": true,
    "WinterTires": true,
    "CoolingOrHeating": true,
    "BabySeat": true,
    "HeatedSeats": true
  }
} 
*/

  String? luggageType;
  MatchingRidesModelDataPreferencesOther? other;

  MatchingRidesModelDataPreferences({
    this.luggageType,
    this.other,
  });
  MatchingRidesModelDataPreferences.fromJson(Map<String, dynamic> json) {
    luggageType = json['luggageType']?.toString();
    other = (json['other'] != null)
        ? MatchingRidesModelDataPreferencesOther.fromJson(json['other'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['luggageType'] = luggageType;
    if (other != null) {
      data['other'] = other!.toJson();
    }
    return data;
  }
}

class MatchingRidesModelDataReturnTrip {
/*
{
  "isReturnTrip": false,
  "returnDate": null,
  "returnTime": null
} 
*/

  bool? isReturnTrip;
  String? returnDate;
  String? returnTime;

  MatchingRidesModelDataReturnTrip({
    this.isReturnTrip,
    this.returnDate,
    this.returnTime,
  });
  MatchingRidesModelDataReturnTrip.fromJson(Map<String, dynamic> json) {
    isReturnTrip = json['isReturnTrip'];
    returnDate = json['returnDate']?.toString();
    returnTime = json['returnTime']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isReturnTrip'] = isReturnTrip;
    data['returnDate'] = returnDate;
    data['returnTime'] = returnTime;
    return data;
  }
}

class MatchingRidesModelDataRecurringTrip {
/*
{
  "recurringTripDays": [
    1
  ],
  "recurringTripIds": [
    ""
  ],
  "isRecurringTripEnabled": false
} 
*/

  List<int?>? recurringTripDays;
  List<String?>? recurringTripIds;
  bool? isRecurringTripEnabled;

  MatchingRidesModelDataRecurringTrip({
    this.recurringTripDays,
    this.recurringTripIds,
    this.isRecurringTripEnabled,
  });
  MatchingRidesModelDataRecurringTrip.fromJson(Map<String, dynamic> json) {
    if (json['recurringTripDays'] != null) {
      final v = json['recurringTripDays'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      recurringTripDays = arr0;
    }
    if (json['recurringTripIds'] != null) {
      final v = json['recurringTripIds'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      recurringTripIds = arr0;
    }
    isRecurringTripEnabled = json['isRecurringTripEnabled'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (recurringTripDays != null) {
      final v = recurringTripDays;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripDays'] = arr0;
    }
    if (recurringTripIds != null) {
      final v = recurringTripIds;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripIds'] = arr0;
    }
    data['isRecurringTripEnabled'] = isRecurringTripEnabled;
    return data;
  }
}

class MatchingRidesModelDataStops {
/*
{
  "name": "",
  "coordinates": [
    -79.6333674
  ],
  "originToStopFair": "",
  "stopToStopFair": "",
  "stopTodestinationFair": "",
  "_id": "668b8f0b6195920124c264e9"
} 
*/

  String? name;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  MatchingRidesModelDataStops({
    this.name,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  MatchingRidesModelDataStops.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataDestination {
/*
{
  "name": "Brampton, ON, Canada",
  "type": "Point",
  "coordinates": [
    -79.7624177
  ]
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;

  MatchingRidesModelDataDestination({
    this.name,
    this.type,
    this.coordinates,
  });
  MatchingRidesModelDataDestination.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class MatchingRidesModelDataOrigin {
/*
{
  "name": "2100 Bovaird Dr E, Brampton, ON L6R 3J7, Canada",
  "type": "Point",
  "coordinates": [
    -79.7448005
  ],
  "originDestinationFair": "15"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originDestinationFair;

  MatchingRidesModelDataOrigin({
    this.name,
    this.type,
    this.coordinates,
    this.originDestinationFair,
  });
  MatchingRidesModelDataOrigin.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originDestinationFair = json['originDestinationFair']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originDestinationFair'] = originDestinationFair;
    return data;
  }
}

class MatchingRidesModelData {
/*
{
  "_id": "668b8f0b6195920124c264e8",
  "driverId": "65c228fd32f497dc57fdeff8",
  "origin": {
    "name": "2100 Bovaird Dr E, Brampton, ON L6R 3J7, Canada",
    "type": "Point",
    "coordinates": [
      -79.7448005
    ],
    "originDestinationFair": "15"
  },
  "destination": {
    "name": "Brampton, ON, Canada",
    "type": "Point",
    "coordinates": [
      -79.7624177
    ]
  },
  "stops": [
    {
      "name": "",
      "coordinates": [
        -79.6333674
      ],
      "originToStopFair": "",
      "stopToStopFair": "",
      "stopTodestinationFair": "",
      "_id": "668b8f0b6195920124c264e9"
    }
  ],
  "tripType": "oneTime",
  "recurringTrip": {
    "recurringTripDays": [
      1
    ],
    "recurringTripIds": [
      ""
    ],
    "isRecurringTripEnabled": false
  },
  "date": "2024-07-08T00:00:00.000Z",
  "time": "19:30",
  "returnTrip": {
    "isReturnTrip": false,
    "returnDate": null,
    "returnTime": null
  },
  "arrivalDate": null,
  "arrivalTime": null,
  "totalSeatAvailable": 3,
  "seatAvailable": 3,
  "preferences": {
    "luggageType": "S",
    "other": {
      "AppreciatesConversation": true,
      "EnjoysMusic": true,
      "SmokeFree": true,
      "PetFriendly": true,
      "WinterTires": true,
      "CoolingOrHeating": true,
      "BabySeat": true,
      "HeatedSeats": true
    }
  },
  "isStarted": false,
  "isCompleted": false,
  "isCancelled": false,
  "description": "ride - 8th july 01:30 PM; return ride: 9th july 01:00 AM",
  "endDateTime": "2024-07-08T07:02:35.862Z",
  "createdAt": "2024-07-08T07:02:35.866Z",
  "updatedAt": "2024-07-08T07:02:35.866Z",
  "matchedOriginLocation": {
    "name": "",
    "coordinates": [
      -79.6333674
    ],
    "originToStopFair": "",
    "stopToStopFair": "",
    "stopTodestinationFair": "",
    "_id": "668b8f0b6195920124c264e9"
  },
  "matchedDestinationLocation": {
    "name": "",
    "coordinates": [
      -79.6333674
    ],
    "originToStopFair": "",
    "stopToStopFair": "",
    "stopTodestinationFair": "",
    "_id": "668b8f0b6195920124c264e9"
  },
  "price": "",
  "ridersDetatils": [
    {
      "_id": "65c22d5672eca065a18fa015",
      "fullName": "rider2",
      "city": "Mumbai",
      "phone": null,
      "email": "rider2@gmail.com",
      "dob": null,
      "gender": null,
      "isDriver": false,
      "referralCode": "U4776F6995",
      "profileStatus": false,
      "vehicleStatus": false,
      "firebaseUid": "o32hfB4Ba0RAHgUbirbPOWfb7zU2",
      "firebaseSignInProvider": "password",
      "idPic": {
        "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
      },
      "profilePic": {
        "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
      },
      "createdAt": "2024-02-06T13:00:06.059Z",
      "updatedAt": "2024-02-06T13:00:06.059Z",
      "status": "active"
    }
  ],
  "driverDetails": [
    {
      "_id": "65c228fd32f497dc57fdeff8",
      "fullName": "Amar",
      "phone": "+11111122222",
      "email": "amar@ideausher.com",
      "dob": "2006-05-25",
      "gender": "Male",
      "isDriver": true,
      "referralCode": "C3072B8509",
      "profileStatus": true,
      "vehicleStatus": true,
      "firebaseUid": "foYFX1qnSaPETdXnF1IFVT0xpkZ2",
      "firebaseSignInProvider": "phone",
      "createdAt": "2024-02-06T12:41:33.824Z",
      "updatedAt": "2024-07-08T07:12:13.245Z",
      "idPic": {
        "key": "idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
        "_id": "664af3b5cd651d9acab11364"
      },
      "profilePic": {
        "key": "usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
        "_id": "664af3b5cd651d9acab11363"
      },
      "status": "active",
      "city": "Zurich, Ontario",
      "pinkMode": false,
      "notificationPreferences": {
        "trip": true,
        "alerts": true,
        "payments": true,
        "transactions": true,
        "offers": true
      },
      "rating": 0,
      "totalRides": 0,
      "isRegister": true,
      "role": "user",
      "rideCancellationCount": 1,
      "connected_account_id": "acct_1POa6QSBsf3jz2sG",
      "suspensionDetails": {
        "dateFrom": "2024-07-02T07:06:39.626Z",
        "dateTo": "2024-07-02T07:06:39.626Z",
        "cancelPolicy": "665d7b1bd2ce0392ad50be4c"
      },
      "vehicleDetails": [
        {
          "_id": "65c23bef32f497dc57fdf002",
          "driverId": "65c228fd32f497dc57fdeff8",
          "vehiclePic": {
            "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
            "_id": "6603d738ba3fdc24d7cbce50"
          },
          "model": "creta",
          "type": "Convertible",
          "color": "Black",
          "year": 2024,
          "licencePlate": "LA2024",
          "createdAt": "2024-02-06T14:02:23.061Z",
          "updatedAt": "2024-04-15T04:53:34.316Z"
        }
      ]
    }
  ]
} 
*/

  String? Id;
  String? driverId;
  MatchingRidesModelDataOrigin? origin;
  MatchingRidesModelDataDestination? destination;
  List<MatchingRidesModelDataStops?>? stops;
  String? tripType;
  MatchingRidesModelDataRecurringTrip? recurringTrip;
  String? date;
  String? time;
  MatchingRidesModelDataReturnTrip? returnTrip;
  String? arrivalDate;
  String? arrivalTime;
  int? totalSeatAvailable;
  int? seatAvailable;
  MatchingRidesModelDataPreferences? preferences;
  bool? isStarted;
  bool? isCompleted;
  bool? isCancelled;
  String? description;
  String? endDateTime;
  String? createdAt;
  String? updatedAt;
  MatchingRidesModelDataMatchedOriginLocation? matchedOriginLocation;
  MatchingRidesModelDataMatchedDestinationLocation? matchedDestinationLocation;
  String? price;
  List<MatchingRidesModelDataRidersDetatils?>? ridersDetatils;
  List<MatchingRidesModelDataDriverDetails?>? driverDetails;

  MatchingRidesModelData({
    this.Id,
    this.driverId,
    this.origin,
    this.destination,
    this.stops,
    this.tripType,
    this.recurringTrip,
    this.date,
    this.time,
    this.returnTrip,
    this.arrivalDate,
    this.arrivalTime,
    this.totalSeatAvailable,
    this.seatAvailable,
    this.preferences,
    this.isStarted,
    this.isCompleted,
    this.isCancelled,
    this.description,
    this.endDateTime,
    this.createdAt,
    this.updatedAt,
    this.matchedOriginLocation,
    this.matchedDestinationLocation,
    this.price,
    this.ridersDetatils,
    this.driverDetails,
  });
  MatchingRidesModelData.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    driverId = json['driverId']?.toString();
    origin = (json['origin'] != null)
        ? MatchingRidesModelDataOrigin.fromJson(json['origin'])
        : null;
    destination = (json['destination'] != null)
        ? MatchingRidesModelDataDestination.fromJson(json['destination'])
        : null;
    if (json['stops'] != null) {
      final v = json['stops'];
      final arr0 = <MatchingRidesModelDataStops>[];
      v.forEach((v) {
        arr0.add(MatchingRidesModelDataStops.fromJson(v));
      });
      stops = arr0;
    }
    tripType = json['tripType']?.toString();
    recurringTrip = (json['recurringTrip'] != null)
        ? MatchingRidesModelDataRecurringTrip.fromJson(json['recurringTrip'])
        : null;
    date = json['date']?.toString();
    time = json['time']?.toString();
    returnTrip = (json['returnTrip'] != null)
        ? MatchingRidesModelDataReturnTrip.fromJson(json['returnTrip'])
        : null;
    arrivalDate = json['arrivalDate']?.toString();
    arrivalTime = json['arrivalTime']?.toString();
    totalSeatAvailable = json['totalSeatAvailable']?.toInt();
    seatAvailable = json['seatAvailable']?.toInt();
    preferences = (json['preferences'] != null)
        ? MatchingRidesModelDataPreferences.fromJson(json['preferences'])
        : null;
    isStarted = json['isStarted'];
    isCompleted = json['isCompleted'];
    isCancelled = json['isCancelled'];
    description = json['description']?.toString();
    endDateTime = json['endDateTime']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    matchedOriginLocation = (json['matchedOriginLocation'] != null)
        ? MatchingRidesModelDataMatchedOriginLocation.fromJson(
            json['matchedOriginLocation'])
        : null;
    matchedDestinationLocation = (json['matchedDestinationLocation'] != null)
        ? MatchingRidesModelDataMatchedDestinationLocation.fromJson(
            json['matchedDestinationLocation'])
        : null;
    price = json['price']?.toString();
    if (json['ridersDetatils'] != null) {
      final v = json['ridersDetatils'];
      final arr0 = <MatchingRidesModelDataRidersDetatils>[];
      v.forEach((v) {
        arr0.add(MatchingRidesModelDataRidersDetatils.fromJson(v));
      });
      ridersDetatils = arr0;
    }
    if (json['driverDetails'] != null) {
      final v = json['driverDetails'];
      final arr0 = <MatchingRidesModelDataDriverDetails>[];
      v.forEach((v) {
        arr0.add(MatchingRidesModelDataDriverDetails.fromJson(v));
      });
      driverDetails = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['driverId'] = driverId;
    if (origin != null) {
      data['origin'] = origin!.toJson();
    }
    if (destination != null) {
      data['destination'] = destination!.toJson();
    }
    if (stops != null) {
      final v = stops;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['stops'] = arr0;
    }
    data['tripType'] = tripType;
    if (recurringTrip != null) {
      data['recurringTrip'] = recurringTrip!.toJson();
    }
    data['date'] = date;
    data['time'] = time;
    if (returnTrip != null) {
      data['returnTrip'] = returnTrip!.toJson();
    }
    data['arrivalDate'] = arrivalDate;
    data['arrivalTime'] = arrivalTime;
    data['totalSeatAvailable'] = totalSeatAvailable;
    data['seatAvailable'] = seatAvailable;
    if (preferences != null) {
      data['preferences'] = preferences!.toJson();
    }
    data['isStarted'] = isStarted;
    data['isCompleted'] = isCompleted;
    data['isCancelled'] = isCancelled;
    data['description'] = description;
    data['endDateTime'] = endDateTime;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (matchedOriginLocation != null) {
      data['matchedOriginLocation'] = matchedOriginLocation!.toJson();
    }
    if (matchedDestinationLocation != null) {
      data['matchedDestinationLocation'] = matchedDestinationLocation!.toJson();
    }
    data['price'] = price;
    if (ridersDetatils != null) {
      final v = ridersDetatils;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['ridersDetatils'] = arr0;
    }
    if (driverDetails != null) {
      final v = driverDetails;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['driverDetails'] = arr0;
    }
    return data;
  }
}

class MatchingRidesModel {
/*
{
  "status": true,
  "data": [
    {
      "_id": "668b8f0b6195920124c264e8",
      "driverId": "65c228fd32f497dc57fdeff8",
      "origin": {
        "name": "2100 Bovaird Dr E, Brampton, ON L6R 3J7, Canada",
        "type": "Point",
        "coordinates": [
          -79.7448005
        ],
        "originDestinationFair": "15"
      },
      "destination": {
        "name": "Brampton, ON, Canada",
        "type": "Point",
        "coordinates": [
          -79.7624177
        ]
      },
      "stops": [
        {
          "name": "",
          "coordinates": [
            -79.6333674
          ],
          "originToStopFair": "",
          "stopToStopFair": "",
          "stopTodestinationFair": "",
          "_id": "668b8f0b6195920124c264e9"
        }
      ],
      "tripType": "oneTime",
      "recurringTrip": {
        "recurringTripDays": [
          1
        ],
        "recurringTripIds": [
          ""
        ],
        "isRecurringTripEnabled": false
      },
      "date": "2024-07-08T00:00:00.000Z",
      "time": "19:30",
      "returnTrip": {
        "isReturnTrip": false,
        "returnDate": null,
        "returnTime": null
      },
      "arrivalDate": null,
      "arrivalTime": null,
      "totalSeatAvailable": 3,
      "seatAvailable": 3,
      "preferences": {
        "luggageType": "S",
        "other": {
          "AppreciatesConversation": true,
          "EnjoysMusic": true,
          "SmokeFree": true,
          "PetFriendly": true,
          "WinterTires": true,
          "CoolingOrHeating": true,
          "BabySeat": true,
          "HeatedSeats": true
        }
      },
      "isStarted": false,
      "isCompleted": false,
      "isCancelled": false,
      "description": "ride - 8th july 01:30 PM; return ride: 9th july 01:00 AM",
      "endDateTime": "2024-07-08T07:02:35.862Z",
      "createdAt": "2024-07-08T07:02:35.866Z",
      "updatedAt": "2024-07-08T07:02:35.866Z",
      "matchedOriginLocation": {
        "name": "",
        "coordinates": [
          -79.6333674
        ],
        "originToStopFair": "",
        "stopToStopFair": "",
        "stopTodestinationFair": "",
        "_id": "668b8f0b6195920124c264e9"
      },
      "matchedDestinationLocation": {
        "name": "",
        "coordinates": [
          -79.6333674
        ],
        "originToStopFair": "",
        "stopToStopFair": "",
        "stopTodestinationFair": "",
        "_id": "668b8f0b6195920124c264e9"
      },
      "price": "",
      "ridersDetatils": [
        {
          "_id": "65c22d5672eca065a18fa015",
          "fullName": "rider2",
          "city": "Mumbai",
          "phone": null,
          "email": "rider2@gmail.com",
          "dob": null,
          "gender": null,
          "isDriver": false,
          "referralCode": "U4776F6995",
          "profileStatus": false,
          "vehicleStatus": false,
          "firebaseUid": "o32hfB4Ba0RAHgUbirbPOWfb7zU2",
          "firebaseSignInProvider": "password",
          "idPic": {
            "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
          },
          "profilePic": {
            "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
          },
          "createdAt": "2024-02-06T13:00:06.059Z",
          "updatedAt": "2024-02-06T13:00:06.059Z",
          "status": "active"
        }
      ],
      "driverDetails": [
        {
          "_id": "65c228fd32f497dc57fdeff8",
          "fullName": "Amar",
          "phone": "+11111122222",
          "email": "amar@ideausher.com",
          "dob": "2006-05-25",
          "gender": "Male",
          "isDriver": true,
          "referralCode": "C3072B8509",
          "profileStatus": true,
          "vehicleStatus": true,
          "firebaseUid": "foYFX1qnSaPETdXnF1IFVT0xpkZ2",
          "firebaseSignInProvider": "phone",
          "createdAt": "2024-02-06T12:41:33.824Z",
          "updatedAt": "2024-07-08T07:12:13.245Z",
          "idPic": {
            "key": "idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/14a1f67c-67d3-417a-88ab-de80318076ce-compressed_image_picker_27017447-33A6-4FD5-9E68-9E333A4519E7-80244-000007220A59499C.jpg",
            "_id": "664af3b5cd651d9acab11364"
          },
          "profilePic": {
            "key": "usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/343e91cd-5339-4cb2-ab54-bb2c5c85ef7b-compressed_image_picker_E10F697C-B897-4693-A1EE-3FAC86253315-80244-000007221A4BE6ED.jpg",
            "_id": "664af3b5cd651d9acab11363"
          },
          "status": "active",
          "city": "Zurich, Ontario",
          "pinkMode": false,
          "notificationPreferences": {
            "trip": true,
            "alerts": true,
            "payments": true,
            "transactions": true,
            "offers": true
          },
          "rating": 0,
          "totalRides": 0,
          "isRegister": true,
          "role": "user",
          "rideCancellationCount": 1,
          "connected_account_id": "acct_1POa6QSBsf3jz2sG",
          "suspensionDetails": {
            "dateFrom": "2024-07-02T07:06:39.626Z",
            "dateTo": "2024-07-02T07:06:39.626Z",
            "cancelPolicy": "665d7b1bd2ce0392ad50be4c"
          },
          "vehicleDetails": [
            {
              "_id": "65c23bef32f497dc57fdf002",
              "driverId": "65c228fd32f497dc57fdeff8",
              "vehiclePic": {
                "key": "vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
                "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/b9fae2cc-33ed-4b5c-b602-c075fa476e3f-1000000038.jpg",
                "_id": "6603d738ba3fdc24d7cbce50"
              },
              "model": "creta",
              "type": "Convertible",
              "color": "Black",
              "year": 2024,
              "licencePlate": "LA2024",
              "createdAt": "2024-02-06T14:02:23.061Z",
              "updatedAt": "2024-04-15T04:53:34.316Z"
            }
          ]
        }
      ]
    }
  ],
  "message": "success."
} 
*/

  bool? status;
  List<MatchingRidesModelData?>? data;
  String? message;

  MatchingRidesModel({
    this.status,
    this.data,
    this.message,
  });
  MatchingRidesModel.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <MatchingRidesModelData>[];
      v.forEach((v) {
        arr0.add(MatchingRidesModelData.fromJson(v));
      });
      this.data = arr0;
    }
    message = json['message']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    data['message'] = message;
    return data;
  }
}
