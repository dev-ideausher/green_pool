///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic {
/*
{
  "key": "vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
  "_id": "65c23bef32f497dc57fdf003"
} 
*/

  String? key;
  String? url;
  String? Id;

  MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic({
    this.key,
    this.url,
    this.Id,
  });
  MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsVehicleDetails {
/*
{
  "_id": "65c23bef32f497dc57fdf002",
  "driverId": "65c228fd32f497dc57fdeff8",
  "vehiclePic": {
    "key": "vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
    "_id": "65c23bef32f497dc57fdf003"
  },
  "model": "ModelY",
  "type": "Sedan",
  "color": "Red",
  "year": 2024,
  "licencePlate": "LA2024",
  "createdAt": "2024-02-06T14:02:23.061Z",
  "updatedAt": "2024-02-06T14:02:23.061Z"
} 
*/

  String? Id;
  String? driverId;
  MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic? vehiclePic;
  String? model;
  String? type;
  String? color;
  int? year;
  String? licencePlate;
  String? createdAt;
  String? updatedAt;

  MatchingRidesModelDataDriverDetailsVehicleDetails({
    this.Id,
    this.driverId,
    this.vehiclePic,
    this.model,
    this.type,
    this.color,
    this.year,
    this.licencePlate,
    this.createdAt,
    this.updatedAt,
  });
  MatchingRidesModelDataDriverDetailsVehicleDetails.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    driverId = json['driverId']?.toString();
    vehiclePic = (json['vehiclePic'] != null) ? MatchingRidesModelDataDriverDetailsVehicleDetailsVehiclePic.fromJson(json['vehiclePic']) : null;
    model = json['model']?.toString();
    type = json['type']?.toString();
    color = json['color']?.toString();
    year = json['year']?.toInt();
    licencePlate = json['licencePlate']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['driverId'] = driverId;
    if (vehiclePic != null) {
      data['vehiclePic'] = vehiclePic!.toJson();
    }
    data['model'] = model;
    data['type'] = type;
    data['color'] = color;
    data['year'] = year;
    data['licencePlate'] = licencePlate;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsProfilePic {
/*
{
  "key": "usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined"
} 
*/

  String? key;
  String? url;

  MatchingRidesModelDataDriverDetailsProfilePic({
    this.key,
    this.url,
  });
  MatchingRidesModelDataDriverDetailsProfilePic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class MatchingRidesModelDataDriverDetailsIdPic {
/*
{
  "key": "idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined"
} 
*/

  String? key;
  String? url;

  MatchingRidesModelDataDriverDetailsIdPic({
    this.key,
    this.url,
  });
  MatchingRidesModelDataDriverDetailsIdPic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class MatchingRidesModelDataDriverDetails {
/*
{
  "_id": "65cf509295ab68928343ebae",
  "fullName": "Neha Gupta",
  "phone": "1234567890",
  "email": "nehaDriver@gmail.com",
  "dob": "Jan1234",
  "gender": "Female23",
  "isDriver": false,
  "referralCode": "Z4727R8649",
  "profileStatus": true,
  "vehicleStatus": false,
  "status": "active",
  "totalRiders": 0,
  "rating": 0,
  "wallet": 0,
  "firebaseUid": "Fu44dZu1VNdhIB26ITHc74539O53",
  "firebaseSignInProvider": "password",
  "createdAt": "2024-02-16T12:09:54.183Z",
  "updatedAt": "2024-02-23T13:44:02.975Z",
  "idPic": {
    "key": "idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined"
  },
  "profilePic": {
    "key": "usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined"
  },
  "vehicleDetails": [
    {
      "_id": "65c23bef32f497dc57fdf002",
      "driverId": "65c228fd32f497dc57fdeff8",
      "vehiclePic": {
        "key": "vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
        "_id": "65c23bef32f497dc57fdf003"
      },
      "model": "ModelY",
      "type": "Sedan",
      "color": "Red",
      "year": 2024,
      "licencePlate": "LA2024",
      "createdAt": "2024-02-06T14:02:23.061Z",
      "updatedAt": "2024-02-06T14:02:23.061Z"
    }
  ]
} 
*/

  String? Id;
  String? fullName;
  String? phone;
  String? email;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? status;
  int? totalRiders;
  int? rating;
  int? wallet;
  String? firebaseUid;
  String? firebaseSignInProvider;
  String? createdAt;
  String? updatedAt;
  MatchingRidesModelDataDriverDetailsIdPic? idPic;
  MatchingRidesModelDataDriverDetailsProfilePic? profilePic;
  List<MatchingRidesModelDataDriverDetailsVehicleDetails?>? vehicleDetails;

  MatchingRidesModelDataDriverDetails({
    this.Id,
    this.fullName,
    this.phone,
    this.email,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.status,
    this.totalRiders,
    this.rating,
    this.wallet,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.createdAt,
    this.updatedAt,
    this.idPic,
    this.profilePic,
    this.vehicleDetails,
  });
  MatchingRidesModelDataDriverDetails.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullName = json['fullName']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    status = json['status']?.toString();
    totalRiders = json['totalRiders']?.toInt();
    rating = json['rating']?.toInt();
    wallet = json['wallet']?.toInt();
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    idPic = (json['idPic'] != null) ? MatchingRidesModelDataDriverDetailsIdPic.fromJson(json['idPic']) : null;
    profilePic = (json['profilePic'] != null) ? MatchingRidesModelDataDriverDetailsProfilePic.fromJson(json['profilePic']) : null;
  if (json['vehicleDetails'] != null) {
  final v = json['vehicleDetails'];
  final arr0 = <MatchingRidesModelDataDriverDetailsVehicleDetails>[];
  v.forEach((v) {
  arr0.add(MatchingRidesModelDataDriverDetailsVehicleDetails.fromJson(v));
  });
    vehicleDetails = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullName'] = fullName;
    data['phone'] = phone;
    data['email'] = email;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['status'] = status;
    data['totalRiders'] = totalRiders;
    data['rating'] = rating;
    data['wallet'] = wallet;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    if (vehicleDetails != null) {
      final v = vehicleDetails;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['vehicleDetails'] = arr0;
    }
    return data;
  }
}

class MatchingRidesModelDataRidersDetatilsProfilePic {
/*
{
  "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
} 
*/

  String? key;
  String? url;

  MatchingRidesModelDataRidersDetatilsProfilePic({
    this.key,
    this.url,
  });
  MatchingRidesModelDataRidersDetatilsProfilePic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class MatchingRidesModelDataRidersDetatilsIdPic {
/*
{
  "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
  "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
} 
*/

  String? key;
  String? url;

  MatchingRidesModelDataRidersDetatilsIdPic({
    this.key,
    this.url,
  });
  MatchingRidesModelDataRidersDetatilsIdPic.fromJson(Map<String, dynamic> json) {
    key = json['key']?.toString();
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['key'] = key;
    data['url'] = url;
    return data;
  }
}

class MatchingRidesModelDataRidersDetatils {
/*
{
  "_id": "65c22d5672eca065a18fa015",
  "fullName": "rider2",
  "city": "Mumbai",
  "phone": null,
  "email": "rider2@gmail.com",
  "dob": null,
  "gender": null,
  "isDriver": false,
  "referralCode": "U4776F6995",
  "profileStatus": false,
  "vehicleStatus": false,
  "firebaseUid": "o32hfB4Ba0RAHgUbirbPOWfb7zU2",
  "firebaseSignInProvider": "password",
  "idPic": {
    "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
  },
  "profilePic": {
    "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
    "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
  },
  "createdAt": "2024-02-06T13:00:06.059Z",
  "updatedAt": "2024-02-06T13:00:06.059Z",
  "status": "active"
} 
*/

  String? Id;
  String? fullName;
  String? city;
  String? phone;
  String? email;
  String? dob;
  String? gender;
  bool? isDriver;
  String? referralCode;
  bool? profileStatus;
  bool? vehicleStatus;
  String? firebaseUid;
  String? firebaseSignInProvider;
  MatchingRidesModelDataRidersDetatilsIdPic? idPic;
  MatchingRidesModelDataRidersDetatilsProfilePic? profilePic;
  String? createdAt;
  String? updatedAt;
  String? status;

  MatchingRidesModelDataRidersDetatils({
    this.Id,
    this.fullName,
    this.city,
    this.phone,
    this.email,
    this.dob,
    this.gender,
    this.isDriver,
    this.referralCode,
    this.profileStatus,
    this.vehicleStatus,
    this.firebaseUid,
    this.firebaseSignInProvider,
    this.idPic,
    this.profilePic,
    this.createdAt,
    this.updatedAt,
    this.status,
  });
  MatchingRidesModelDataRidersDetatils.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    fullName = json['fullName']?.toString();
    city = json['city']?.toString();
    phone = json['phone']?.toString();
    email = json['email']?.toString();
    dob = json['dob']?.toString();
    gender = json['gender']?.toString();
    isDriver = json['isDriver'];
    referralCode = json['referralCode']?.toString();
    profileStatus = json['profileStatus'];
    vehicleStatus = json['vehicleStatus'];
    firebaseUid = json['firebaseUid']?.toString();
    firebaseSignInProvider = json['firebaseSignInProvider']?.toString();
    idPic = (json['idPic'] != null) ? MatchingRidesModelDataRidersDetatilsIdPic.fromJson(json['idPic']) : null;
    profilePic = (json['profilePic'] != null) ? MatchingRidesModelDataRidersDetatilsProfilePic.fromJson(json['profilePic']) : null;
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    status = json['status']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['fullName'] = fullName;
    data['city'] = city;
    data['phone'] = phone;
    data['email'] = email;
    data['dob'] = dob;
    data['gender'] = gender;
    data['isDriver'] = isDriver;
    data['referralCode'] = referralCode;
    data['profileStatus'] = profileStatus;
    data['vehicleStatus'] = vehicleStatus;
    data['firebaseUid'] = firebaseUid;
    data['firebaseSignInProvider'] = firebaseSignInProvider;
    if (idPic != null) {
      data['idPic'] = idPic!.toJson();
    }
    if (profilePic != null) {
      data['profilePic'] = profilePic!.toJson();
    }
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['status'] = status;
    return data;
  }
}

class MatchingRidesModelDataMatchedDestinationLocation {
/*
{
  "name": "CHAWRI BAZAR, Delhi",
  "type": "Point",
  "coordinates": [
    77.22716
  ],
  "originToStopFair": "24",
  "stopToStopFair": null,
  "stopTodestinationFair": "35",
  "_id": "65fc12960e742bbe96b0e95e"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  MatchingRidesModelDataMatchedDestinationLocation({
    this.name,
    this.type,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  MatchingRidesModelDataMatchedDestinationLocation.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
  if (json['coordinates'] != null) {
  final v = json['coordinates'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataMatchedOriginLocation {
/*
{
  "name": "chandni chok",
  "type": "Point",
  "coordinates": [
    77.23764
  ],
  "originToStopFair": "12",
  "stopToStopFair": "10",
  "stopTodestinationFair": "70",
  "_id": "65fc12960e742bbe96b0e95d"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  MatchingRidesModelDataMatchedOriginLocation({
    this.name,
    this.type,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  MatchingRidesModelDataMatchedOriginLocation.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
  if (json['coordinates'] != null) {
  final v = json['coordinates'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataPreferencesOther {
/*
{
  "AppreciatesConversation": false,
  "EnjoysMusic": false,
  "SmokeFree": false,
  "PetFriendly": false,
  "WinterTires": false,
  "CoolingOrHeating": false,
  "BabySeat": false,
  "HeatedSeats": false
} 
*/

  bool? AppreciatesConversation;
  bool? EnjoysMusic;
  bool? SmokeFree;
  bool? PetFriendly;
  bool? WinterTires;
  bool? CoolingOrHeating;
  bool? BabySeat;
  bool? HeatedSeats;

  MatchingRidesModelDataPreferencesOther({
    this.AppreciatesConversation,
    this.EnjoysMusic,
    this.SmokeFree,
    this.PetFriendly,
    this.WinterTires,
    this.CoolingOrHeating,
    this.BabySeat,
    this.HeatedSeats,
  });
  MatchingRidesModelDataPreferencesOther.fromJson(Map<String, dynamic> json) {
    AppreciatesConversation = json['AppreciatesConversation'];
    EnjoysMusic = json['EnjoysMusic'];
    SmokeFree = json['SmokeFree'];
    PetFriendly = json['PetFriendly'];
    WinterTires = json['WinterTires'];
    CoolingOrHeating = json['CoolingOrHeating'];
    BabySeat = json['BabySeat'];
    HeatedSeats = json['HeatedSeats'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['AppreciatesConversation'] = AppreciatesConversation;
    data['EnjoysMusic'] = EnjoysMusic;
    data['SmokeFree'] = SmokeFree;
    data['PetFriendly'] = PetFriendly;
    data['WinterTires'] = WinterTires;
    data['CoolingOrHeating'] = CoolingOrHeating;
    data['BabySeat'] = BabySeat;
    data['HeatedSeats'] = HeatedSeats;
    return data;
  }
}

class MatchingRidesModelDataPreferences {
/*
{
  "luggageType": "S",
  "other": {
    "AppreciatesConversation": false,
    "EnjoysMusic": false,
    "SmokeFree": false,
    "PetFriendly": false,
    "WinterTires": false,
    "CoolingOrHeating": false,
    "BabySeat": false,
    "HeatedSeats": false
  }
} 
*/

  String? luggageType;
  MatchingRidesModelDataPreferencesOther? other;

  MatchingRidesModelDataPreferences({
    this.luggageType,
    this.other,
  });
  MatchingRidesModelDataPreferences.fromJson(Map<String, dynamic> json) {
    luggageType = json['luggageType']?.toString();
    other = (json['other'] != null) ? MatchingRidesModelDataPreferencesOther.fromJson(json['other']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['luggageType'] = luggageType;
    if (other != null) {
      data['other'] = other!.toJson();
    }
    return data;
  }
}

class MatchingRidesModelDataReturnTrip {
/*
{
  "isReturnTrip": false,
  "returnDate": null,
  "returnTime": ""
} 
*/

  bool? isReturnTrip;
  String? returnDate;
  String? returnTime;

  MatchingRidesModelDataReturnTrip({
    this.isReturnTrip,
    this.returnDate,
    this.returnTime,
  });
  MatchingRidesModelDataReturnTrip.fromJson(Map<String, dynamic> json) {
    isReturnTrip = json['isReturnTrip'];
    returnDate = json['returnDate']?.toString();
    returnTime = json['returnTime']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isReturnTrip'] = isReturnTrip;
    data['returnDate'] = returnDate;
    data['returnTime'] = returnTime;
    return data;
  }
}

class MatchingRidesModelDataRecurringTrip {
/*
{
  "recurringTripDays": [
    5
  ],
  "recurringTripIds": [
    "65c22d5672eca065a18fa015"
  ]
} 
*/

  List<int?>? recurringTripDays;
  List<String?>? recurringTripIds;

  MatchingRidesModelDataRecurringTrip({
    this.recurringTripDays,
    this.recurringTripIds,
  });
  MatchingRidesModelDataRecurringTrip.fromJson(Map<String, dynamic> json) {
  if (json['recurringTripDays'] != null) {
  final v = json['recurringTripDays'];
  final arr0 = <int>[];
  v.forEach((v) {
  arr0.add(v.toInt());
  });
    recurringTripDays = arr0;
    }
  if (json['recurringTripIds'] != null) {
  final v = json['recurringTripIds'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    recurringTripIds = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (recurringTripDays != null) {
      final v = recurringTripDays;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['recurringTripDays'] = arr0;
    }
    if (recurringTripIds != null) {
      final v = recurringTripIds;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['recurringTripIds'] = arr0;
    }
    return data;
  }
}

class MatchingRidesModelDataStops {
/*
{
  "name": "chandni chok",
  "type": "Point",
  "coordinates": [
    77.23764
  ],
  "originToStopFair": "12",
  "stopToStopFair": "10",
  "stopTodestinationFair": "70",
  "_id": "65fc12960e742bbe96b0e95d"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  MatchingRidesModelDataStops({
    this.name,
    this.type,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  MatchingRidesModelDataStops.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
  if (json['coordinates'] != null) {
  final v = json['coordinates'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class MatchingRidesModelDataDestination {
/*
{
  "name": "rajiv chok",
  "type": "Point",
  "coordinates": [
    71.2193128
  ]
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;

  MatchingRidesModelDataDestination({
    this.name,
    this.type,
    this.coordinates,
  });
  MatchingRidesModelDataDestination.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
  if (json['coordinates'] != null) {
  final v = json['coordinates'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class MatchingRidesModelDataOrigin {
/*
{
  "name": "kashmiri gate",
  "type": "Point",
  "coordinates": [
    70.235167
  ],
  "originDestinationFair": "12"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originDestinationFair;

  MatchingRidesModelDataOrigin({
    this.name,
    this.type,
    this.coordinates,
    this.originDestinationFair,
  });
  MatchingRidesModelDataOrigin.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
  if (json['coordinates'] != null) {
  final v = json['coordinates'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    coordinates = arr0;
    }
    originDestinationFair = json['originDestinationFair']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['coordinates'] = arr0;
    }
    data['originDestinationFair'] = originDestinationFair;
    return data;
  }
}

class MatchingRidesModelData {
/*
{
  "_id": "65fc12960e742bbe96b0e95c",
  "driverId": "65cf509295ab68928343ebae",
  "origin": {
    "name": "kashmiri gate",
    "type": "Point",
    "coordinates": [
      70.235167
    ],
    "originDestinationFair": "12"
  },
  "destination": {
    "name": "rajiv chok",
    "type": "Point",
    "coordinates": [
      71.2193128
    ]
  },
  "stops": [
    {
      "name": "chandni chok",
      "type": "Point",
      "coordinates": [
        77.23764
      ],
      "originToStopFair": "12",
      "stopToStopFair": "10",
      "stopTodestinationFair": "70",
      "_id": "65fc12960e742bbe96b0e95d"
    }
  ],
  "tripType": "recurringTrip",
  "recurringTrip": {
    "recurringTripDays": [
      5
    ],
    "recurringTripIds": [
      "65c22d5672eca065a18fa015"
    ]
  },
  "date": "2024-03-05T07:00:17.320Z",
  "returnTrip": {
    "isReturnTrip": false,
    "returnDate": null,
    "returnTime": ""
  },
  "arrivalDate": null,
  "arrivalTime": null,
  "seatAvailable": 4,
  "preferences": {
    "luggageType": "S",
    "other": {
      "AppreciatesConversation": false,
      "EnjoysMusic": false,
      "SmokeFree": false,
      "PetFriendly": false,
      "WinterTires": false,
      "CoolingOrHeating": false,
      "BabySeat": false,
      "HeatedSeats": false
    }
  },
  "isStarted": false,
  "isCompleted": false,
  "isCancelled": false,
  "riders": [
    "65c22d5672eca065a18fa015"
  ],
  "drivers": [
    "65c22d5672eca065a18fa015"
  ],
  "createdAt": "2024-03-21T10:57:26.430Z",
  "updatedAt": "2024-03-21T10:57:26.430Z",
  "distanceFromOrigin": 10.630987771417333,
  "stopsDistances": [
    0.01473121698978132
  ],
  "minStopDistance": 0.01473121698978132,
  "matchedOriginLocation": {
    "name": "chandni chok",
    "type": "Point",
    "coordinates": [
      77.23764
    ],
    "originToStopFair": "12",
    "stopToStopFair": "10",
    "stopTodestinationFair": "70",
    "_id": "65fc12960e742bbe96b0e95d"
  },
  "distanceFromDestination": 9.231055908962988,
  "destinationStopsDistances": [
    0.02092096811239905
  ],
  "minDestinationStopDistance": 0.016461606931286205,
  "matchedDestinationLocation": {
    "name": "CHAWRI BAZAR, Delhi",
    "type": "Point",
    "coordinates": [
      77.22716
    ],
    "originToStopFair": "24",
    "stopToStopFair": null,
    "stopTodestinationFair": "35",
    "_id": "65fc12960e742bbe96b0e95e"
  },
  "ridersDetatils": [
    {
      "_id": "65c22d5672eca065a18fa015",
      "fullName": "rider2",
      "city": "Mumbai",
      "phone": null,
      "email": "rider2@gmail.com",
      "dob": null,
      "gender": null,
      "isDriver": false,
      "referralCode": "U4776F6995",
      "profileStatus": false,
      "vehicleStatus": false,
      "firebaseUid": "o32hfB4Ba0RAHgUbirbPOWfb7zU2",
      "firebaseSignInProvider": "password",
      "idPic": {
        "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
      },
      "profilePic": {
        "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
      },
      "createdAt": "2024-02-06T13:00:06.059Z",
      "updatedAt": "2024-02-06T13:00:06.059Z",
      "status": "active"
    }
  ],
  "driverDetails": [
    {
      "_id": "65cf509295ab68928343ebae",
      "fullName": "Neha Gupta",
      "phone": "1234567890",
      "email": "nehaDriver@gmail.com",
      "dob": "Jan1234",
      "gender": "Female23",
      "isDriver": false,
      "referralCode": "Z4727R8649",
      "profileStatus": true,
      "vehicleStatus": false,
      "status": "active",
      "totalRiders": 0,
      "rating": 0,
      "wallet": 0,
      "firebaseUid": "Fu44dZu1VNdhIB26ITHc74539O53",
      "firebaseSignInProvider": "password",
      "createdAt": "2024-02-16T12:09:54.183Z",
      "updatedAt": "2024-02-23T13:44:02.975Z",
      "idPic": {
        "key": "idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined"
      },
      "profilePic": {
        "key": "usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined",
        "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined"
      },
      "vehicleDetails": [
        {
          "_id": "65c23bef32f497dc57fdf002",
          "driverId": "65c228fd32f497dc57fdeff8",
          "vehiclePic": {
            "key": "vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
            "_id": "65c23bef32f497dc57fdf003"
          },
          "model": "ModelY",
          "type": "Sedan",
          "color": "Red",
          "year": 2024,
          "licencePlate": "LA2024",
          "createdAt": "2024-02-06T14:02:23.061Z",
          "updatedAt": "2024-02-06T14:02:23.061Z"
        }
      ]
    }
  ],
  "time": "2:00 PM"
} 
*/

  String? Id;
  String? driverId;
  MatchingRidesModelDataOrigin? origin;
  MatchingRidesModelDataDestination? destination;
  List<MatchingRidesModelDataStops?>? stops;
  String? tripType;
  MatchingRidesModelDataRecurringTrip? recurringTrip;
  String? date;
  MatchingRidesModelDataReturnTrip? returnTrip;
  String? arrivalDate;
  String? arrivalTime;
  int? seatAvailable;
  MatchingRidesModelDataPreferences? preferences;
  bool? isStarted;
  bool? isCompleted;
  bool? isCancelled;
  List<String?>? riders;
  List<String?>? drivers;
  String? createdAt;
  String? updatedAt;
  double? distanceFromOrigin;
  List<double?>? stopsDistances;
  double? minStopDistance;
  MatchingRidesModelDataMatchedOriginLocation? matchedOriginLocation;
  double? distanceFromDestination;
  List<double?>? destinationStopsDistances;
  double? minDestinationStopDistance;
  MatchingRidesModelDataMatchedDestinationLocation? matchedDestinationLocation;
  List<MatchingRidesModelDataRidersDetatils?>? ridersDetatils;
  List<MatchingRidesModelDataDriverDetails?>? driverDetails;
  String? time;

  MatchingRidesModelData({
    this.Id,
    this.driverId,
    this.origin,
    this.destination,
    this.stops,
    this.tripType,
    this.recurringTrip,
    this.date,
    this.returnTrip,
    this.arrivalDate,
    this.arrivalTime,
    this.seatAvailable,
    this.preferences,
    this.isStarted,
    this.isCompleted,
    this.isCancelled,
    this.riders,
    this.drivers,
    this.createdAt,
    this.updatedAt,
    this.distanceFromOrigin,
    this.stopsDistances,
    this.minStopDistance,
    this.matchedOriginLocation,
    this.distanceFromDestination,
    this.destinationStopsDistances,
    this.minDestinationStopDistance,
    this.matchedDestinationLocation,
    this.ridersDetatils,
    this.driverDetails,
    this.time,
  });
  MatchingRidesModelData.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    driverId = json['driverId']?.toString();
    origin = (json['origin'] != null) ? MatchingRidesModelDataOrigin.fromJson(json['origin']) : null;
    destination = (json['destination'] != null) ? MatchingRidesModelDataDestination.fromJson(json['destination']) : null;
  if (json['stops'] != null) {
  final v = json['stops'];
  final arr0 = <MatchingRidesModelDataStops>[];
  v.forEach((v) {
  arr0.add(MatchingRidesModelDataStops.fromJson(v));
  });
    stops = arr0;
    }
    tripType = json['tripType']?.toString();
    recurringTrip = (json['recurringTrip'] != null) ? MatchingRidesModelDataRecurringTrip.fromJson(json['recurringTrip']) : null;
    date = json['date']?.toString();
    returnTrip = (json['returnTrip'] != null) ? MatchingRidesModelDataReturnTrip.fromJson(json['returnTrip']) : null;
    arrivalDate = json['arrivalDate']?.toString();
    arrivalTime = json['arrivalTime']?.toString();
    seatAvailable = json['seatAvailable']?.toInt();
    preferences = (json['preferences'] != null) ? MatchingRidesModelDataPreferences.fromJson(json['preferences']) : null;
    isStarted = json['isStarted'];
    isCompleted = json['isCompleted'];
    isCancelled = json['isCancelled'];
  if (json['riders'] != null) {
  final v = json['riders'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    riders = arr0;
    }
  if (json['drivers'] != null) {
  final v = json['drivers'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    drivers = arr0;
    }
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    distanceFromOrigin = json['distanceFromOrigin']?.toDouble();
  if (json['stopsDistances'] != null) {
  final v = json['stopsDistances'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    stopsDistances = arr0;
    }
    minStopDistance = json['minStopDistance']?.toDouble();
    matchedOriginLocation = (json['matchedOriginLocation'] != null) ? MatchingRidesModelDataMatchedOriginLocation.fromJson(json['matchedOriginLocation']) : null;
    distanceFromDestination = json['distanceFromDestination']?.toDouble();
  if (json['destinationStopsDistances'] != null) {
  final v = json['destinationStopsDistances'];
  final arr0 = <double>[];
  v.forEach((v) {
  arr0.add(v.toDouble());
  });
    destinationStopsDistances = arr0;
    }
    minDestinationStopDistance = json['minDestinationStopDistance']?.toDouble();
    matchedDestinationLocation = (json['matchedDestinationLocation'] != null) ? MatchingRidesModelDataMatchedDestinationLocation.fromJson(json['matchedDestinationLocation']) : null;
  if (json['ridersDetatils'] != null) {
  final v = json['ridersDetatils'];
  final arr0 = <MatchingRidesModelDataRidersDetatils>[];
  v.forEach((v) {
  arr0.add(MatchingRidesModelDataRidersDetatils.fromJson(v));
  });
    ridersDetatils = arr0;
    }
  if (json['driverDetails'] != null) {
  final v = json['driverDetails'];
  final arr0 = <MatchingRidesModelDataDriverDetails>[];
  v.forEach((v) {
  arr0.add(MatchingRidesModelDataDriverDetails.fromJson(v));
  });
    driverDetails = arr0;
    }
    time = json['time']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['driverId'] = driverId;
    if (origin != null) {
      data['origin'] = origin!.toJson();
    }
    if (destination != null) {
      data['destination'] = destination!.toJson();
    }
    if (stops != null) {
      final v = stops;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['stops'] = arr0;
    }
    data['tripType'] = tripType;
    if (recurringTrip != null) {
      data['recurringTrip'] = recurringTrip!.toJson();
    }
    data['date'] = date;
    if (returnTrip != null) {
      data['returnTrip'] = returnTrip!.toJson();
    }
    data['arrivalDate'] = arrivalDate;
    data['arrivalTime'] = arrivalTime;
    data['seatAvailable'] = seatAvailable;
    if (preferences != null) {
      data['preferences'] = preferences!.toJson();
    }
    data['isStarted'] = isStarted;
    data['isCompleted'] = isCompleted;
    data['isCancelled'] = isCancelled;
    if (riders != null) {
      final v = riders;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['riders'] = arr0;
    }
    if (drivers != null) {
      final v = drivers;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['drivers'] = arr0;
    }
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['distanceFromOrigin'] = distanceFromOrigin;
    if (stopsDistances != null) {
      final v = stopsDistances;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['stopsDistances'] = arr0;
    }
    data['minStopDistance'] = minStopDistance;
    if (matchedOriginLocation != null) {
      data['matchedOriginLocation'] = matchedOriginLocation!.toJson();
    }
    data['distanceFromDestination'] = distanceFromDestination;
    if (destinationStopsDistances != null) {
      final v = destinationStopsDistances;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['destinationStopsDistances'] = arr0;
    }
    data['minDestinationStopDistance'] = minDestinationStopDistance;
    if (matchedDestinationLocation != null) {
      data['matchedDestinationLocation'] = matchedDestinationLocation!.toJson();
    }
    if (ridersDetatils != null) {
      final v = ridersDetatils;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['ridersDetatils'] = arr0;
    }
    if (driverDetails != null) {
      final v = driverDetails;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['driverDetails'] = arr0;
    }
    data['time'] = time;
    return data;
  }
}

class MatchingRidesModel {
/*
{
  "status": true,
  "data": [
    {
      "_id": "65fc12960e742bbe96b0e95c",
      "driverId": "65cf509295ab68928343ebae",
      "origin": {
        "name": "kashmiri gate",
        "type": "Point",
        "coordinates": [
          70.235167
        ],
        "originDestinationFair": "12"
      },
      "destination": {
        "name": "rajiv chok",
        "type": "Point",
        "coordinates": [
          71.2193128
        ]
      },
      "stops": [
        {
          "name": "chandni chok",
          "type": "Point",
          "coordinates": [
            77.23764
          ],
          "originToStopFair": "12",
          "stopToStopFair": "10",
          "stopTodestinationFair": "70",
          "_id": "65fc12960e742bbe96b0e95d"
        }
      ],
      "tripType": "recurringTrip",
      "recurringTrip": {
        "recurringTripDays": [
          5
        ],
        "recurringTripIds": [
          "65c22d5672eca065a18fa015"
        ]
      },
      "date": "2024-03-05T07:00:17.320Z",
      "returnTrip": {
        "isReturnTrip": false,
        "returnDate": null,
        "returnTime": ""
      },
      "arrivalDate": null,
      "arrivalTime": null,
      "seatAvailable": 4,
      "preferences": {
        "luggageType": "S",
        "other": {
          "AppreciatesConversation": false,
          "EnjoysMusic": false,
          "SmokeFree": false,
          "PetFriendly": false,
          "WinterTires": false,
          "CoolingOrHeating": false,
          "BabySeat": false,
          "HeatedSeats": false
        }
      },
      "isStarted": false,
      "isCompleted": false,
      "isCancelled": false,
      "riders": [
        "65c22d5672eca065a18fa015"
      ],
      "drivers": [
        "65c22d5672eca065a18fa015"
      ],
      "createdAt": "2024-03-21T10:57:26.430Z",
      "updatedAt": "2024-03-21T10:57:26.430Z",
      "distanceFromOrigin": 10.630987771417333,
      "stopsDistances": [
        0.01473121698978132
      ],
      "minStopDistance": 0.01473121698978132,
      "matchedOriginLocation": {
        "name": "chandni chok",
        "type": "Point",
        "coordinates": [
          77.23764
        ],
        "originToStopFair": "12",
        "stopToStopFair": "10",
        "stopTodestinationFair": "70",
        "_id": "65fc12960e742bbe96b0e95d"
      },
      "distanceFromDestination": 9.231055908962988,
      "destinationStopsDistances": [
        0.02092096811239905
      ],
      "minDestinationStopDistance": 0.016461606931286205,
      "matchedDestinationLocation": {
        "name": "CHAWRI BAZAR, Delhi",
        "type": "Point",
        "coordinates": [
          77.22716
        ],
        "originToStopFair": "24",
        "stopToStopFair": null,
        "stopTodestinationFair": "35",
        "_id": "65fc12960e742bbe96b0e95e"
      },
      "ridersDetatils": [
        {
          "_id": "65c22d5672eca065a18fa015",
          "fullName": "rider2",
          "city": "Mumbai",
          "phone": null,
          "email": "rider2@gmail.com",
          "dob": null,
          "gender": null,
          "isDriver": false,
          "referralCode": "U4776F6995",
          "profileStatus": false,
          "vehicleStatus": false,
          "firebaseUid": "o32hfB4Ba0RAHgUbirbPOWfb7zU2",
          "firebaseSignInProvider": "password",
          "idPic": {
            "key": "idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/692044ef-538e-4718-bd71-215ec7c12d23-images..jpg"
          },
          "profilePic": {
            "key": "usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/a71bbbb2-acbf-4bd1-8504-c1c501341388-images..jpg"
          },
          "createdAt": "2024-02-06T13:00:06.059Z",
          "updatedAt": "2024-02-06T13:00:06.059Z",
          "status": "active"
        }
      ],
      "driverDetails": [
        {
          "_id": "65cf509295ab68928343ebae",
          "fullName": "Neha Gupta",
          "phone": "1234567890",
          "email": "nehaDriver@gmail.com",
          "dob": "Jan1234",
          "gender": "Female23",
          "isDriver": false,
          "referralCode": "Z4727R8649",
          "profileStatus": true,
          "vehicleStatus": false,
          "status": "active",
          "totalRiders": 0,
          "rating": 0,
          "wallet": 0,
          "firebaseUid": "Fu44dZu1VNdhIB26ITHc74539O53",
          "firebaseSignInProvider": "password",
          "createdAt": "2024-02-16T12:09:54.183Z",
          "updatedAt": "2024-02-23T13:44:02.975Z",
          "idPic": {
            "key": "idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/idPic/0e4487b7-672d-4dd2-a47d-0a09fc3080ce-undefined"
          },
          "profilePic": {
            "key": "usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined",
            "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/usersProfile/c0776c67-3fb4-4a39-9842-d85bfb1e598a-undefined"
          },
          "vehicleDetails": [
            {
              "_id": "65c23bef32f497dc57fdf002",
              "driverId": "65c228fd32f497dc57fdeff8",
              "vehiclePic": {
                "key": "vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
                "url": "https://green-pool-bucket.s3.ca-central-1.amazonaws.com/vehiclePic/0f9bfe4d-10f3-479f-8f56-caa8faad5737-1000000034.jpg",
                "_id": "65c23bef32f497dc57fdf003"
              },
              "model": "ModelY",
              "type": "Sedan",
              "color": "Red",
              "year": 2024,
              "licencePlate": "LA2024",
              "createdAt": "2024-02-06T14:02:23.061Z",
              "updatedAt": "2024-02-06T14:02:23.061Z"
            }
          ]
        }
      ],
      "time": "2:00 PM"
    }
  ],
  "message": "success."
} 
*/

  bool? status;
  List<MatchingRidesModelData?>? data;
  String? message;

  MatchingRidesModel({
    this.status,
    this.data,
    this.message,
  });
  MatchingRidesModel.fromJson(Map<String, dynamic> json) {
    status = json['status'];
  if (json['data'] != null) {
  final v = json['data'];
  final arr0 = <MatchingRidesModelData>[];
  v.forEach((v) {
  arr0.add(MatchingRidesModelData.fromJson(v));
  });
    this.data = arr0;
    }
    message = json['message']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['data'] = arr0;
    }
    data['message'] = message;
    return data;
  }
}
