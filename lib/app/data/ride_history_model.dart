///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class RideHistoryModelDataStops {
/*
{
  "name": "",
  "type": null,
  "coordinates": [
    0
  ],
  "originToStopFair": null,
  "stopToStopFair": null,
  "stopTodestinationFair": null,
  "_id": "6639b92358249d84ebc5067b"
} 
*/

  String? name;
  String? type;
  List<int?>? coordinates;
  String? originToStopFair;
  String? stopToStopFair;
  String? stopTodestinationFair;
  String? Id;

  RideHistoryModelDataStops({
    this.name,
    this.type,
    this.coordinates,
    this.originToStopFair,
    this.stopToStopFair,
    this.stopTodestinationFair,
    this.Id,
  });
  RideHistoryModelDataStops.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      coordinates = arr0;
    }
    originToStopFair = json['originToStopFair']?.toString();
    stopToStopFair = json['stopToStopFair']?.toString();
    stopTodestinationFair = json['stopTodestinationFair']?.toString();
    Id = json['_id']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originToStopFair'] = originToStopFair;
    data['stopToStopFair'] = stopToStopFair;
    data['stopTodestinationFair'] = stopTodestinationFair;
    data['_id'] = Id;
    return data;
  }
}

class RideHistoryModelDataPreferencesOther {
/*
{
  "AppreciatesConversation": false,
  "EnjoysMusic": false,
  "SmokeFree": true,
  "PetFriendly": true,
  "WinterTires": false,
  "CoolingOrHeating": false,
  "BabySeat": false,
  "HeatedSeats": false
} 
*/

  bool? AppreciatesConversation;
  bool? EnjoysMusic;
  bool? SmokeFree;
  bool? PetFriendly;
  bool? WinterTires;
  bool? CoolingOrHeating;
  bool? BabySeat;
  bool? HeatedSeats;

  RideHistoryModelDataPreferencesOther({
    this.AppreciatesConversation,
    this.EnjoysMusic,
    this.SmokeFree,
    this.PetFriendly,
    this.WinterTires,
    this.CoolingOrHeating,
    this.BabySeat,
    this.HeatedSeats,
  });
  RideHistoryModelDataPreferencesOther.fromJson(Map<String, dynamic> json) {
    AppreciatesConversation = json['AppreciatesConversation'];
    EnjoysMusic = json['EnjoysMusic'];
    SmokeFree = json['SmokeFree'];
    PetFriendly = json['PetFriendly'];
    WinterTires = json['WinterTires'];
    CoolingOrHeating = json['CoolingOrHeating'];
    BabySeat = json['BabySeat'];
    HeatedSeats = json['HeatedSeats'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['AppreciatesConversation'] = AppreciatesConversation;
    data['EnjoysMusic'] = EnjoysMusic;
    data['SmokeFree'] = SmokeFree;
    data['PetFriendly'] = PetFriendly;
    data['WinterTires'] = WinterTires;
    data['CoolingOrHeating'] = CoolingOrHeating;
    data['BabySeat'] = BabySeat;
    data['HeatedSeats'] = HeatedSeats;
    return data;
  }
}

class RideHistoryModelDataPreferences {
/*
{
  "other": {
    "AppreciatesConversation": false,
    "EnjoysMusic": false,
    "SmokeFree": true,
    "PetFriendly": true,
    "WinterTires": false,
    "CoolingOrHeating": false,
    "BabySeat": false,
    "HeatedSeats": false
  },
  "luggageType": "M"
} 
*/

  RideHistoryModelDataPreferencesOther? other;
  String? luggageType;

  RideHistoryModelDataPreferences({
    this.other,
    this.luggageType,
  });
  RideHistoryModelDataPreferences.fromJson(Map<String, dynamic> json) {
    other = (json['other'] != null)
        ? RideHistoryModelDataPreferencesOther.fromJson(json['other'])
        : null;
    luggageType = json['luggageType']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (other != null) {
      data['other'] = other!.toJson();
    }
    data['luggageType'] = luggageType;
    return data;
  }
}

class RideHistoryModelDataReturnTrip {
/*
{
  "isReturnTrip": false,
  "returnDate": null,
  "returnTime": null
} 
*/

  bool? isReturnTrip;
  String? returnDate;
  String? returnTime;

  RideHistoryModelDataReturnTrip({
    this.isReturnTrip,
    this.returnDate,
    this.returnTime,
  });
  RideHistoryModelDataReturnTrip.fromJson(Map<String, dynamic> json) {
    isReturnTrip = json['isReturnTrip'];
    returnDate = json['returnDate']?.toString();
    returnTime = json['returnTime']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isReturnTrip'] = isReturnTrip;
    data['returnDate'] = returnDate;
    data['returnTime'] = returnTime;
    return data;
  }
}

class RideHistoryModelDataRecurringTrip {
/*
{
  "recurringTripDays": [
    1
  ],
  "recurringTripIds": [
    ""
  ],
  "isRecurringTripEnabled": false
} 
*/

  List<int?>? recurringTripDays;
  List<String?>? recurringTripIds;
  bool? isRecurringTripEnabled;

  RideHistoryModelDataRecurringTrip({
    this.recurringTripDays,
    this.recurringTripIds,
    this.isRecurringTripEnabled,
  });
  RideHistoryModelDataRecurringTrip.fromJson(Map<String, dynamic> json) {
    if (json['recurringTripDays'] != null) {
      final v = json['recurringTripDays'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      recurringTripDays = arr0;
    }
    if (json['recurringTripIds'] != null) {
      final v = json['recurringTripIds'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      recurringTripIds = arr0;
    }
    isRecurringTripEnabled = json['isRecurringTripEnabled'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (recurringTripDays != null) {
      final v = recurringTripDays;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripDays'] = arr0;
    }
    if (recurringTripIds != null) {
      final v = recurringTripIds;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['recurringTripIds'] = arr0;
    }
    data['isRecurringTripEnabled'] = isRecurringTripEnabled;
    return data;
  }
}

class RideHistoryModelDataDestination {
/*
{
  "name": "1 Mills Cir, Ontario",
  "type": "Point",
  "coordinates": [
    -117.551993
  ]
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;

  RideHistoryModelDataDestination({
    this.name,
    this.type,
    this.coordinates,
  });
  RideHistoryModelDataDestination.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class RideHistoryModelDataOrigin {
/*
{
  "name": "Ontario International Airport (ONT), Ontario",
  "type": "Point",
  "coordinates": [
    -117.5980922
  ],
  "originDestinationFair": "12"
} 
*/

  String? name;
  String? type;
  List<double?>? coordinates;
  String? originDestinationFair;

  RideHistoryModelDataOrigin({
    this.name,
    this.type,
    this.coordinates,
    this.originDestinationFair,
  });
  RideHistoryModelDataOrigin.fromJson(Map<String, dynamic> json) {
    name = json['name']?.toString();
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
    originDestinationFair = json['originDestinationFair']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['name'] = name;
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['coordinates'] = arr0;
    }
    data['originDestinationFair'] = originDestinationFair;
    return data;
  }
}

class RideHistoryModelData {
/*
{
  "origin": {
    "name": "Ontario International Airport (ONT), Ontario",
    "type": "Point",
    "coordinates": [
      -117.5980922
    ],
    "originDestinationFair": "12"
  },
  "destination": {
    "name": "1 Mills Cir, Ontario",
    "type": "Point",
    "coordinates": [
      -117.551993
    ]
  },
  "recurringTrip": {
    "recurringTripDays": [
      1
    ],
    "recurringTripIds": [
      ""
    ],
    "isRecurringTripEnabled": false
  },
  "returnTrip": {
    "isReturnTrip": false,
    "returnDate": null,
    "returnTime": null
  },
  "preferences": {
    "other": {
      "AppreciatesConversation": false,
      "EnjoysMusic": false,
      "SmokeFree": true,
      "PetFriendly": true,
      "WinterTires": false,
      "CoolingOrHeating": false,
      "BabySeat": false,
      "HeatedSeats": false
    },
    "luggageType": "M"
  },
  "_id": "6639b92358249d84ebc5067a",
  "driverId": "6639b78f58249d84ebc5062f",
  "stops": [
    {
      "name": "",
      "type": null,
      "coordinates": [
        0
      ],
      "originToStopFair": null,
      "stopToStopFair": null,
      "stopTodestinationFair": null,
      "_id": "6639b92358249d84ebc5067b"
    }
  ],
  "tripType": "oneTime",
  "date": "2024-05-08T00:00:00.000Z",
  "time": "10:45 AM",
  "arrivalDate": null,
  "arrivalTime": null,
  "seatAvailable": 4,
  "isStarted": false,
  "isCompleted": false,
  "isCancelled": false,
  "riders": [
    ""
  ],
  "drivers": [
    ""
  ],
  "description": "from ontario mills to ontario airport",
  "createdAt": "2024-05-07T05:16:19.352Z",
  "updatedAt": "2024-05-07T05:16:19.352Z"
} 
*/

  RideHistoryModelDataOrigin? origin;
  RideHistoryModelDataDestination? destination;
  RideHistoryModelDataRecurringTrip? recurringTrip;
  RideHistoryModelDataReturnTrip? returnTrip;
  RideHistoryModelDataPreferences? preferences;
  String? Id;
  String? driverId;
  List<RideHistoryModelDataStops?>? stops;
  String? tripType;
  String? date;
  String? time;
  String? arrivalDate;
  String? arrivalTime;
  int? seatAvailable;
  bool? isStarted;
  bool? isCompleted;
  bool? isCancelled;
  List<String?>? riders;
  List<String?>? drivers;
  String? description;
  String? createdAt;
  String? updatedAt;

  RideHistoryModelData({
    this.origin,
    this.destination,
    this.recurringTrip,
    this.returnTrip,
    this.preferences,
    this.Id,
    this.driverId,
    this.stops,
    this.tripType,
    this.date,
    this.time,
    this.arrivalDate,
    this.arrivalTime,
    this.seatAvailable,
    this.isStarted,
    this.isCompleted,
    this.isCancelled,
    this.riders,
    this.drivers,
    this.description,
    this.createdAt,
    this.updatedAt,
  });
  RideHistoryModelData.fromJson(Map<String, dynamic> json) {
    origin = (json['origin'] != null)
        ? RideHistoryModelDataOrigin.fromJson(json['origin'])
        : null;
    destination = (json['destination'] != null)
        ? RideHistoryModelDataDestination.fromJson(json['destination'])
        : null;
    recurringTrip = (json['recurringTrip'] != null)
        ? RideHistoryModelDataRecurringTrip.fromJson(json['recurringTrip'])
        : null;
    returnTrip = (json['returnTrip'] != null)
        ? RideHistoryModelDataReturnTrip.fromJson(json['returnTrip'])
        : null;
    preferences = (json['preferences'] != null)
        ? RideHistoryModelDataPreferences.fromJson(json['preferences'])
        : null;
    Id = json['_id']?.toString();
    driverId = json['driverId']?.toString();
    if (json['stops'] != null) {
      final v = json['stops'];
      final arr0 = <RideHistoryModelDataStops>[];
      v.forEach((v) {
        arr0.add(RideHistoryModelDataStops.fromJson(v));
      });
      stops = arr0;
    }
    tripType = json['tripType']?.toString();
    date = json['date']?.toString();
    time = json['time']?.toString();
    arrivalDate = json['arrivalDate']?.toString();
    arrivalTime = json['arrivalTime']?.toString();
    seatAvailable = json['seatAvailable']?.toInt();
    isStarted = json['isStarted'];
    isCompleted = json['isCompleted'];
    isCancelled = json['isCancelled'];
    if (json['riders'] != null) {
      final v = json['riders'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      riders = arr0;
    }
    if (json['drivers'] != null) {
      final v = json['drivers'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      drivers = arr0;
    }
    description = json['description']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (origin != null) {
      data['origin'] = origin!.toJson();
    }
    if (destination != null) {
      data['destination'] = destination!.toJson();
    }
    if (recurringTrip != null) {
      data['recurringTrip'] = recurringTrip!.toJson();
    }
    if (returnTrip != null) {
      data['returnTrip'] = returnTrip!.toJson();
    }
    if (preferences != null) {
      data['preferences'] = preferences!.toJson();
    }
    data['_id'] = Id;
    data['driverId'] = driverId;
    if (stops != null) {
      final v = stops;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['stops'] = arr0;
    }
    data['tripType'] = tripType;
    data['date'] = date;
    data['time'] = time;
    data['arrivalDate'] = arrivalDate;
    data['arrivalTime'] = arrivalTime;
    data['seatAvailable'] = seatAvailable;
    data['isStarted'] = isStarted;
    data['isCompleted'] = isCompleted;
    data['isCancelled'] = isCancelled;
    if (riders != null) {
      final v = riders;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['riders'] = arr0;
    }
    if (drivers != null) {
      final v = drivers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['drivers'] = arr0;
    }
    data['description'] = description;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    return data;
  }
}

class RideHistoryModel {
/*
{
  "status": true,
  "data": [
    {
      "origin": {
        "name": "Ontario International Airport (ONT), Ontario",
        "type": "Point",
        "coordinates": [
          -117.5980922
        ],
        "originDestinationFair": "12"
      },
      "destination": {
        "name": "1 Mills Cir, Ontario",
        "type": "Point",
        "coordinates": [
          -117.551993
        ]
      },
      "recurringTrip": {
        "recurringTripDays": [
          1
        ],
        "recurringTripIds": [
          ""
        ],
        "isRecurringTripEnabled": false
      },
      "returnTrip": {
        "isReturnTrip": false,
        "returnDate": null,
        "returnTime": null
      },
      "preferences": {
        "other": {
          "AppreciatesConversation": false,
          "EnjoysMusic": false,
          "SmokeFree": true,
          "PetFriendly": true,
          "WinterTires": false,
          "CoolingOrHeating": false,
          "BabySeat": false,
          "HeatedSeats": false
        },
        "luggageType": "M"
      },
      "_id": "6639b92358249d84ebc5067a",
      "driverId": "6639b78f58249d84ebc5062f",
      "stops": [
        {
          "name": "",
          "type": null,
          "coordinates": [
            0
          ],
          "originToStopFair": null,
          "stopToStopFair": null,
          "stopTodestinationFair": null,
          "_id": "6639b92358249d84ebc5067b"
        }
      ],
      "tripType": "oneTime",
      "date": "2024-05-08T00:00:00.000Z",
      "time": "10:45 AM",
      "arrivalDate": null,
      "arrivalTime": null,
      "seatAvailable": 4,
      "isStarted": false,
      "isCompleted": false,
      "isCancelled": false,
      "riders": [
        ""
      ],
      "drivers": [
        ""
      ],
      "description": "from ontario mills to ontario airport",
      "createdAt": "2024-05-07T05:16:19.352Z",
      "updatedAt": "2024-05-07T05:16:19.352Z"
    }
  ],
  "message": "Record found."
} 
*/

  bool? status;
  List<RideHistoryModelData?>? data;
  String? message;

  RideHistoryModel({
    this.status,
    this.data,
    this.message,
  });
  RideHistoryModel.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <RideHistoryModelData>[];
      v.forEach((v) {
        arr0.add(RideHistoryModelData.fromJson(v));
      });
      this.data = arr0;
    }
    message = json['message']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    data['message'] = message;
    return data;
  }
}
